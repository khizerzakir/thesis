{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\nimport subprocess\nimport sys\nsys.path.insert(0,'..')\nfrom pathlib import Path\nimport os\nimport random\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn.functional import one_hot\nfrom torch import Tensor\nfrom typing import Union\n\nimport matplotlib.pylab as plt\n\nimport time\nimport numpy as np\nimport torch as th\nimport torch.nn as nn\nfrom torch.utils import data\nfrom torch.utils.data import Dataset, DataLoader, SubsetRandomSampler, WeightedRandomSampler\nimport torch.optim.lr_scheduler as lr_scheduler\n\n# from focal_loss import FocalLoss\nfrom utils import _axat, _atxa, _mvmt\nimport seaborn as sns\n\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package],\n                         stdout=subprocess.DEVNULL,\n                         stderr=subprocess.DEVNULL\n                         )\nrequired_packages = [\n    \"geoopt\",\n    \"pyriemann\",\n]\nfor package in required_packages:\n    try:\n        __import__(package)\n        print(f\"{package} is already installed.\")\n    except ImportError:\n        print(f\"{package} is not installed. Installing...\")\n        install(package)\n\nimport geoopt\nfrom pyriemann.utils.covariance import covariances, normalize\n\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.manifold import TSNE\nimport pandas as pd\n\n\nuse_cuda = th.cuda.is_available()\ndevice = th.device(\"cuda:0\" if use_cuda else \"cpu\")\nprint(device)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:41:49.646509Z","iopub.execute_input":"2024-05-17T01:41:49.646901Z","iopub.status.idle":"2024-05-17T01:41:52.759911Z","shell.execute_reply.started":"2024-05-17T01:41:49.646862Z","shell.execute_reply":"2024-05-17T01:41:52.758794Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"geoopt is already installed.\npyriemann is already installed.\ncuda:0\n","output_type":"stream"}]},{"cell_type":"code","source":"class FocalLoss(nn.Module):\n    \"\"\"Computes the focal loss between input and target\n    as described here https://arxiv.org/abs/1708.02002v2\n\n    Args:\n        gamma (float):  The focal loss focusing parameter.\n        weights (Union[None, Tensor]): Rescaling weight given to each class.\n        If given, has to be a Tensor of size C. optional.\n        reduction (str): Specifies the reduction to apply to the output.\n        it should be one of the following 'none', 'mean', or 'sum'.\n        default 'mean'.\n        ignore_index (int): Specifies a target value that is ignored and\n        does not contribute to the input gradient. optional.\n        eps (float): smoothing to prevent log from returning inf.\n    \"\"\"\n    def __init__(\n            self,\n            gamma,\n            weights: Union[None, Tensor] = None,\n            reduction: str = 'mean',\n            ignore_index=-100,\n            eps=1e-16\n            ) -> None:\n        super().__init__()\n        if reduction not in ['mean', 'none', 'sum']:\n            raise NotImplementedError(\n                'Reduction {} not implemented.'.format(reduction)\n                )\n        assert weights is None or isinstance(weights, Tensor), \\\n            'weights should be of type Tensor or None, but {} given'.format(\n                type(weights))\n        self.reduction = reduction\n        self.gamma = gamma\n        self.ignore_index = ignore_index\n        self.eps = eps\n        self.weights = weights\n\n    def _get_weights(self, target: Tensor) -> Tensor:\n        if self.weights is None:\n            return torch.ones(target.shape[0])\n        weights = target * self.weights\n        return weights.sum(dim=-1)\n\n    def _process_target(\n            self, target: Tensor, num_classes: int, mask: Tensor\n            ) -> Tensor:\n        \n        #convert all ignore_index elements to zero to avoid error in one_hot\n        #note - the choice of value 0 is arbitrary, but it should not matter as these elements will be ignored in the loss calculation\n        target = target * (target!=self.ignore_index) \n        target = target.view(-1)\n        return one_hot(target, num_classes=num_classes)\n\n    def _process_preds(self, x: Tensor) -> Tensor:\n        if x.dim() == 1:\n            x = torch.vstack([1 - x, x])\n            x = x.permute(1, 0)\n            return x\n        return x.view(-1, x.shape[-1])\n\n    def _calc_pt(\n            self, target: Tensor, x: Tensor, mask: Tensor\n            ) -> Tensor:\n        p = target * x\n        p = p.sum(dim=-1)\n        p = p * ~mask\n        return p\n\n    def forward(self, x: Tensor, target: Tensor) -> Tensor:\n        assert torch.all((x >= 0.0) & (x <= 1.0)), ValueError(\n            'The predictions values should be between 0 and 1, \\\n                make sure to pass the values to sigmoid for binary \\\n                classification or softmax for multi-class classification'\n        )\n        mask = target == self.ignore_index\n        mask = mask.view(-1)\n        x = self._process_preds(x)\n        num_classes = x.shape[-1]\n        target = self._process_target(target, num_classes, mask)\n        weights = self._get_weights(target).to(x.device)\n        pt = self._calc_pt(target, x, mask)\n        focal = 1 - pt\n        nll = -torch.log(self.eps + pt)\n        nll = nll.masked_fill(mask, 0)\n        loss = weights * (focal ** self.gamma) * nll\n        return self._reduce(loss, mask, weights)\n\n    def _reduce(self, x: Tensor, mask: Tensor, weights: Tensor) -> Tensor:\n        if self.reduction == 'mean':\n            return x.sum() / (~mask * weights).sum()\n        elif self.reduction == 'sum':\n            return x.sum()\n        else:\n            return x","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:41:52.761837Z","iopub.execute_input":"2024-05-17T01:41:52.762675Z","iopub.status.idle":"2024-05-17T01:41:52.780880Z","shell.execute_reply.started":"2024-05-17T01:41:52.762638Z","shell.execute_reply":"2024-05-17T01:41:52.779915Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"class BusemanSimilarityClassifier(nn.Module):\n    def busemann_spd(self, logM):\n        \"\"\"\n        Compute the Busemann similarity for Symmetric Positive Definite (SPD) matrices.\n        \n        :param logM: Logarithm of SPD matrices, shape (b, n, n)\n        :return: Similarity scores, shape (b, n_proto)\n        \"\"\"\n        return logM.reshape(logM.shape[0], -1) @ self.proto.reshape(self.proto.shape[0], -1).T\n    def __init__(self,dim1,n_proto,n_classes,optim_proto=True):\n        super().__init__()\n        self.n_proto = n_proto\n        self.n_classes = n_classes\n        self.dim1 = dim1\n        \n        self.manifold = geoopt.Stiefel()\n\n        # Random projection directions, shape (d-1, num_projections)\n        theta = np.random.normal(size=(self.n_proto, self.dim1))\n        theta = th.nn.functional.normalize(th.from_numpy(theta), p=2, dim=-1).type(th.float64).to(device)\n        #self.D = theta[:,None] * th.eye(theta.shape[-1],dtype=th.float64, device=device)\n        self.register_parameter(\"theta_proto\", geoopt.ManifoldParameter(theta, geoopt.Sphere()))\n        #self.theta_proto=theta\n\n        ## Random orthogonal matrices\n        Z = th.randn((self.n_proto, self.dim1, self.dim1), dtype=th.float64, device=device)\n        self.Q = th.svd(Z)[0]\n        self.manifold.assert_check_point_on_manifold(self.Q)\n        self.register_parameter(\"Q_proto\", geoopt.ManifoldParameter(self.Q, self.manifold))\n        self.proto = _mvmt(self.Q_proto, self.theta_proto, self.Q_proto)\n        # linear layer\n        self.linear = nn.Linear(self.n_proto, self.n_classes).double()\n\n    def forward(self, x):\n        self.proto = _mvmt(self.Q_proto, self.theta_proto, self.Q_proto)\n        y = self.linear(self.busemann_spd(x))#.view(sim_embedding.shape[0], -1))\n        return y\n    \n    def embed(self, x):\n        self.proto = _mvmt(self.Q_proto, self.theta_proto, self.Q_proto)\n        return self.busemann_spd(x)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:42:03.493953Z","iopub.execute_input":"2024-05-17T01:42:03.494350Z","iopub.status.idle":"2024-05-17T01:42:03.507470Z","shell.execute_reply.started":"2024-05-17T01:42:03.494320Z","shell.execute_reply":"2024-05-17T01:42:03.506534Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"# Model definition","metadata":{}},{"cell_type":"code","source":"class LogEucRResNet(nn.Module):\n    def __init__(self, inputdim=10, dim1=7, n_proto=12, classes=11, embed_only=False):\n        super().__init__()\n        self.inputdim = inputdim\n        self.dim1 = dim1\n        self.n_proto = n_proto\n        self.classes = classes\n        self.embed_only = embed_only\n\n        self.manifold_Stiefel = geoopt.Stiefel()\n        self.manifold_SPD = geoopt.SymmetricPositiveDefinite(\"LEM\")\n        \n        # init first bimap\n        bm1 = th.randn((1, self.inputdim, self.dim1), dtype=th.float64)\n        bm1 = th.svd(bm1)[0]\n        self.register_parameter(\"bimap1\", geoopt.ManifoldParameter(bm1, self.manifold_Stiefel))\n        \n        P = th.randn((1, self.dim1, self.dim1), dtype=th.float64)\n        P = th.svd(P)[0]\n\n        self.register_parameter(\"P1\", geoopt.ManifoldParameter(P, self.manifold_Stiefel))\n\n        self.classiflayer=BusemanSimilarityClassifier(self.dim1,self.n_proto, classes)\n        self.fc_layer = nn.Linear(self.dim1 * self.dim1, self.classes).double()\n        self.softmax =  nn.Softmax(dim=-1)\n\n        self.spectrum_map = nn.Sequential(\n            nn.Conv1d(1, 10, 5, padding=\"same\").double(),\n            nn.LeakyReLU(),\n            nn.BatchNorm1d(10).double(),\n            nn.Conv1d(10, 5, 3, padding=\"same\").double(),\n            nn.LeakyReLU(),\n            nn.BatchNorm1d(5).double(),\n            nn.Conv1d(5, 1, 3, padding=\"same\").double(),\n        )\n        \n    def forward(self, x):\n        x = _atxa(self.bimap1, x)\n        evecs, eigs, _ = th.svd(x)\n        f_eigs = self.spectrum_map(eigs) # spectral map\n        v1 = _mvmt(self.P1, f_eigs, self.P1)            \n        v1 = self.manifold_SPD.proju(x, v1)\n        eigs = th.clamp(eigs, 1e-8, 1e8)\n        log_x = _mvmt(evecs, th.log(eigs), evecs)     \n        x = log_x + v1\n        if self.embed_only:\n            return x.reshape(x.shape[0],-1)\n        return self.softmax(self.fc_layer(x.reshape(x.shape[0],-1)))\n        #return self.softmax(self.classiflayer(x)) # Buseman Similarity Classifier when single modality is used\n            \nclass LogEucRResNet_Combo(nn.Module):\n    def __init__(self, inputdim_temp=36, dim1_temp=24, inputdim_spec=10, dim1_spec=7, n_proto=12, classes=11, buseman_classif=True):\n        super().__init__()\n        self.classes = classes\n        self.buseman_classif = buseman_classif\n        self.model_temp = LogEucRResNet(inputdim_temp, dim1_temp, n_proto, embed_only=True)\n        self.model_spectral = LogEucRResNet(inputdim_spec, dim1_spec, n_proto, embed_only=True)\n        \n        self.classiflayer = BusemanSimilarityClassifier(dim1_temp+1,n_proto,classes)\n        self.fc_layer = nn.Linear(dim1_temp*dim1_temp+dim1_spec*dim1_spec,classes).double()        \n        self.softmax = nn.Softmax(dim=-1)\n        \n    def forward(self, x1, x2):\n        out_1 = self.model_temp(x1) # probabilities\n        out_2 = self.model_spectral(x2) # probabilities\n        x = th.concat((out_1, out_2), dim=1)\n        #print(x.shape)\n        if self.buseman_classif:\n            return self.softmax(self.classiflayer(x))\n        else:\n            return self.softmax(self.fc_layer(x))","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:42:07.539597Z","iopub.execute_input":"2024-05-17T01:42:07.540065Z","iopub.status.idle":"2024-05-17T01:42:07.558512Z","shell.execute_reply.started":"2024-05-17T01:42:07.540033Z","shell.execute_reply":"2024-05-17T01:42:07.557651Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"Create model and load it from file ","metadata":{}},{"cell_type":"code","source":"model = LogEucRResNet(inputdim=36, dim1=24, n_proto=12, classes=11).to(device)\nmodel.eval()\n# get number of trainable parameters\ntrainable_total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\nprint(trainable_total_params)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:42:12.476622Z","iopub.execute_input":"2024-05-17T01:42:12.477075Z","iopub.status.idle":"2024-05-17T01:42:12.758162Z","shell.execute_reply.started":"2024-05-17T01:42:12.477042Z","shell.execute_reply":"2024-05-17T01:42:12.757192Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/geoopt/manifolds/symmetric_positive_definite.py:52: UserWarning: SPDMetric.LEM is not fully implemented and results may be not as you expect\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"15391\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## visualize dataset embedding","metadata":{}},{"cell_type":"markdown","source":"load dataset","metadata":{}},{"cell_type":"code","source":"class TS_COV(Dataset):\n    def __init__(self, root_dir, np_file, estimator='scm'):\n        self.root_dir = root_dir\n        self.np_file = np_file\n        self.estimator = estimator\n        self.x, self.y, self.class_names = self.load_data()\n        #self.cov = normalize(self.calculate_covariances(),'corr')\n        self.x1 = self.calculate_covariances_36()\n        self.x2 = self.calculate_covariances_10()\n    \n    def __len__(self):\n        return len(self.x)\n\n    def __getitem__(self, idx):\n        x1, x2= self.x1[idx], self.x2[idx]\n        y_sample = self.y[idx]\n        class_name = self.class_names[y_sample]\n        x1 = th.from_numpy(np.asarray([x1])).double()\n        x2 = th.from_numpy(np.asarray([x2])).double()\n        x1,x2 = x1.reshape(1, 36, 36), x2.reshape(1, 10, 10)\n        y = th.from_numpy(np.array(y_sample)).long()\n        return x1,x2, y#, class_name\n\n    def load_data(self):\n        file_path = os.path.join(self.root_dir, self.np_file)\n        data = np.load(file_path, allow_pickle= True)\n        x = data['series']\n        y = data['labels']\n        class_names = data['class_names']\n        return x, y, class_names\n\n    def calculate_covariances_10(self):\n        x_transposed = np.transpose(self.x, (0, 2, 1))\n        cov = covariances(x_transposed, estimator=self.estimator)\n        return cov\n    def calculate_covariances_36(self):\n        cov = covariances(self.x, estimator=self.estimator)\n        return cov\n        \n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:42:16.583829Z","iopub.execute_input":"2024-05-17T01:42:16.584742Z","iopub.status.idle":"2024-05-17T01:42:16.595780Z","shell.execute_reply.started":"2024-05-17T01:42:16.584709Z","shell.execute_reply":"2024-05-17T01:42:16.594828Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"%matplotlib inline\n\nroot_dir = r\"/kaggle/input/normalized-data/\"\nnpz_file = \"98_p_norm_data.npz\"\nbatch_size = 64  # batch size\n\ndef calculate_class_weights(labels):\n    class_sample_count = np.array([len(np.where(labels == t)[0]) for t in np.unique(labels)])\n    weight = 1 - class_sample_count / len(labels)\n    return th.from_numpy(weight).double()\n\ndef create_data_loaders(dataset, train_indices, val_indices, test_indices, batch_size):\n    train_loader = DataLoader(dataset, batch_size=batch_size, sampler=SubsetRandomSampler(train_indices))\n    val_loader = DataLoader(dataset, batch_size=batch_size, sampler=SubsetRandomSampler(val_indices))\n    test_loader = DataLoader(dataset, batch_size=batch_size, sampler=SubsetRandomSampler(test_indices), shuffle=False)\n    return train_loader, val_loader, test_loader\n\ndef plot_class_distribution(train_loader, val_loader, test_loader, n_classes):\n    train_counts = np.zeros(n_classes)\n    for _, _, labels in train_loader:\n        for l in labels:\n            train_counts[l] += 1\n\n    val_counts = np.zeros(n_classes)\n    for _, _, labels in val_loader:\n        for l in labels:\n            val_counts[l] += 1\n\n    test_counts = np.zeros(n_classes)\n    for _, _, labels in test_loader:\n        for l in labels:\n            test_counts[l] += 1\n\n    plt.figure(figsize=(12, 6))\n    plt.bar(np.arange(n_classes), train_counts, alpha=0.5, label='Train')\n    plt.bar(np.arange(n_classes), val_counts, alpha=0.5, label='Validation')\n    plt.bar(np.arange(n_classes), test_counts, alpha=0.5, label='Test')\n    plt.xlabel('Classes')\n    plt.ylabel('Count')\n    plt.yscale('log')\n    plt.title('Class Distribution in Train, Validation, and Test Sets')\n    plt.legend(loc='best')\n    plt.show()\n\n# Initialize dataset\ndataset = TS_COV(root_dir=root_dir, np_file=npz_file, estimator='scm')\n\n# Split data into train, validation, and test sets\ntrain_indices, test_indices = train_test_split(list(range(len(dataset))), test_size=0.2, stratify=dataset.y, random_state=42)\ntrain_indices, val_indices = train_test_split(train_indices, test_size=0.2, stratify=dataset.y[train_indices], random_state=42)\n\n# Calculate class weights\nweights = calculate_class_weights(dataset.y)\nweights = weights.to(device)\n\n\n# Create data loaders\ntrain_loader, val_loader, test_loader = create_data_loaders(dataset, train_indices, val_indices, test_indices, batch_size)\n\n# Plot class distribution\nplot_class_distribution(train_loader, val_loader, test_loader, n_classes=11)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:42:53.915406Z","iopub.execute_input":"2024-05-17T01:42:53.916108Z","iopub.status.idle":"2024-05-17T01:43:15.281281Z","shell.execute_reply.started":"2024-05-17T01:42:53.916075Z","shell.execute_reply":"2024-05-17T01:43:15.280368Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# access one matri\nfor x1,x2, y in train_loader:\n    print(x1.shape)\n    print(x2.shape)\n    print(y.shape)\n    break","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:43:15.283257Z","iopub.execute_input":"2024-05-17T01:43:15.284028Z","iopub.status.idle":"2024-05-17T01:43:15.525757Z","shell.execute_reply.started":"2024-05-17T01:43:15.283990Z","shell.execute_reply":"2024-05-17T01:43:15.524620Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"torch.Size([64, 1, 36, 36])\ntorch.Size([64, 1, 10, 10])\ntorch.Size([64])\n","output_type":"stream"}]},{"cell_type":"code","source":"lr=1e-2\nepochs=200\ngamma_value=0.5\nstep_size=30\n#setup loss and optimizer\n#loss_fn = nn.CrossEntropyLoss()\nloss_fn = FocalLoss(gamma=3,weights=weights)\n#opti = MixOptimizer(model.parameters(),lr=lr)\nopti = geoopt.optim.RiemannianAdam(model.parameters(), lr=lr)\n#scheduler = lr_scheduler.ExponentialLR(opti, gamma=gamma_value)\nscheduler = lr_scheduler.StepLR(opti, step_size, gamma_value)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:43:25.499728Z","iopub.execute_input":"2024-05-17T01:43:25.500583Z","iopub.status.idle":"2024-05-17T01:43:26.805442Z","shell.execute_reply.started":"2024-05-17T01:43:25.500552Z","shell.execute_reply":"2024-05-17T01:43:26.804413Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"def train_model(model, train_loader, val_loader, loss_fn, optimizer, scheduler, epochs, combo=False, temp=False):\n    t1, t2, t3, t4, t5 = [], [], [], [], []\n    device = th.device(\"cuda\" if th.cuda.is_available() else \"cpu\")\n\n    for epoch in range(epochs):\n        start_time = time.time()  # Start time of the epoch\n        model.train()\n\n        # Training phase\n        loss_train, acc_train = [], []\n        for x1, x2, y in train_loader:\n            x1 = x1.to(device)\n            x2 = x2.to(device)\n            y = y.to(device).long()\n            optimizer.zero_grad()\n            \n            # Conditional forward pass\n            if combo:\n                out = model(x1, x2)\n            elif temp:\n                out = model(x1)\n            else:\n                out = model(x2)\n                \n            l = loss_fn(out, y)\n            \n            acc, loss = (out.argmax(1) == y).cpu().numpy().sum() / out.shape[0], l.cpu().data.numpy()\n            loss_train.append(loss)\n            acc_train.append(acc)\n            l.backward()\n            optimizer.step()\n        scheduler.step()\n\n        acc_train = np.asarray(acc_train).mean()\n        loss_train = np.asarray(loss_train).mean()\n        t1.append(loss_train)\n        t2.append(100 * acc_train)\n\n        # Validation phase\n        loss_val, acc_val_list = [], []\n        y_true, y_pred = [], []\n        model.eval()\n        for x1, x2, y in val_loader:\n            x1 = x1.to(device)\n            x2 = x2.to(device)\n            y = y.to(device).long()\n            with th.no_grad():\n                # Conditional forward pass\n                if combo:\n                    out = model(x1, x2)\n                elif temp:\n                    out = model(x1)\n                else:\n                    out = model(x2)\n                    \n                l = loss_fn(out, y)\n                \n            loss_val.append(l.cpu().data.numpy())\n            predicted_labels = out.argmax(1)\n            y_true.extend(list(y.cpu().numpy()))\n            y_pred.extend(list(predicted_labels.cpu().numpy()))\n            acc = (predicted_labels == y).cpu().numpy().sum() / out.shape[0]\n            \n            acc_val_list.append(acc)\n        acc_val = np.asarray(acc_val_list).mean()\n        loss_val = np.asarray(loss_val).mean()    \n   \n        t3.append(100 * acc_val)\n        t4.append(loss_val)\n        f1_test = f1_score(y_true, y_pred, average='macro')\n        t5.append(100 * f1_test)\n        print('Epoch {}/{} - Train loss: {:.4f} - Val loss: {:.4f} - Train acc: {:.2f}% - Val acc: {:.2f}% - Test F1-score: {:.2f}'.format(\n            epoch + 1, epochs, loss_train, loss_val, 100 * acc_train, 100 * acc_val, 100 * f1_test))\n\n        elapsed_time = time.time() - start_time\n        print('Elapsed time: {:.2f} seconds'.format(elapsed_time))\n\n    return t1, t2, t3, t4, t5\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:43:27.723165Z","iopub.execute_input":"2024-05-17T01:43:27.724098Z","iopub.status.idle":"2024-05-17T01:43:27.741334Z","shell.execute_reply.started":"2024-05-17T01:43:27.724066Z","shell.execute_reply":"2024-05-17T01:43:27.740233Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"\ndef evaluate_model(model, data_loader, loss_fn, model_name, figure_name, combo=False, temp=False):\n    loss_val, acc_val = [], []\n    y_true, y_pred = [], []\n\n    model.eval()\n    for x1, x2, y in data_loader:\n        x1 = x1.to(device)\n        x2 = x2.to(device)\n        y = y.to(device).long()\n        with th.no_grad():\n            # Conditional forward pass\n            if combo:\n                out = model(x1, x2)\n            elif temp:\n                out = model(x1)\n            else:\n                out = model(x2)\n                \n            l = loss_fn(out, y)\n        \n        predicted_labels = out.argmax(1)\n        y_true.extend(list(y.cpu().numpy()))\n        y_pred.extend(list(predicted_labels.cpu().numpy()))\n        acc = (predicted_labels == y).cpu().numpy().sum() / out.shape[0]\n        loss_val.append(l.cpu().data.numpy())\n        acc_val.append(acc)\n\n    acc_val = np.asarray(acc_val).mean()\n    loss_val = np.asarray(loss_val).mean()\n\n    print('Validation loss: {:.4f}'.format(loss_val))\n    print('Validation accuracy: {:.2f}%'.format(100 * acc_val))\n\n    # Save the model\n    th.save(model.state_dict(), f'{model_name}.ckpt')\n    print(f'Model saved as {model_name}.ckpt')\n\n    # Print classification report\n    print(classification_report(y_true, y_pred, digits=2, target_names=data_loader.dataset.class_names))\n    cmatrix = confusion_matrix(y_true, y_pred)\n    Ncmatrix = cmatrix.astype('float') / cmatrix.sum(axis=1)[:, np.newaxis]\n\n    group_counts = ['{0:0.0f}'.format(value) for value in cmatrix.flatten()]\n    group_percentages = ['{0:.2%}'.format(value) for value in Ncmatrix.flatten()]\n    labels = [f'{v1}\\n{v2}' for v1, v2 in zip(group_counts, group_percentages)]\n    labels = np.asarray(labels).reshape(11, 11)\n\n    # Plot and save the confusion matrix figure\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(Ncmatrix, annot=labels, fmt='', cmap='Reds', xticklabels=data_loader.dataset.class_names, yticklabels=data_loader.dataset.class_names)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\n Acc={:.2f}%'.format(100 * acc_val))\n    plt.title('Normalized Confusion Matrix')\n    \n    plt.savefig(f'{figure_name}.png')\n    plt.show()\n    print(f'Figure saved as {figure_name}.png')\n\n    return 100 * acc_val\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:43:45.890720Z","iopub.execute_input":"2024-05-17T01:43:45.891095Z","iopub.status.idle":"2024-05-17T01:43:45.905984Z","shell.execute_reply.started":"2024-05-17T01:43:45.891070Z","shell.execute_reply":"2024-05-17T01:43:45.904880Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"t1, t2, t3, t4, t5 = train_model(model, train_loader, val_loader, loss_fn, opti, scheduler, epochs, combo=False, temp=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T01:44:04.555382Z","iopub.execute_input":"2024-05-17T01:44:04.556154Z","iopub.status.idle":"2024-05-17T02:44:32.944274Z","shell.execute_reply.started":"2024-05-17T01:44:04.556120Z","shell.execute_reply":"2024-05-17T02:44:32.943271Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Epoch 1/200 - Train loss: 0.4775 - Val loss: 0.3845 - Train acc: 86.62% - Val acc: 87.11% - Test F1-score: 64.32\nElapsed time: 19.07 seconds\nEpoch 2/200 - Train loss: 0.3977 - Val loss: 0.4916 - Train acc: 90.13% - Val acc: 91.55% - Test F1-score: 66.78\nElapsed time: 18.57 seconds\nEpoch 3/200 - Train loss: 0.4013 - Val loss: 0.4824 - Train acc: 91.16% - Val acc: 90.48% - Test F1-score: 67.44\nElapsed time: 17.91 seconds\nEpoch 4/200 - Train loss: 0.4079 - Val loss: 0.4852 - Train acc: 91.69% - Val acc: 92.40% - Test F1-score: 70.95\nElapsed time: 17.88 seconds\nEpoch 5/200 - Train loss: 0.4114 - Val loss: 0.4866 - Train acc: 92.14% - Val acc: 91.62% - Test F1-score: 67.20\nElapsed time: 18.15 seconds\nEpoch 6/200 - Train loss: 0.4207 - Val loss: 0.4164 - Train acc: 92.30% - Val acc: 92.43% - Test F1-score: 71.19\nElapsed time: 17.97 seconds\nEpoch 7/200 - Train loss: 0.4056 - Val loss: 0.4548 - Train acc: 92.65% - Val acc: 91.70% - Test F1-score: 69.75\nElapsed time: 17.91 seconds\nEpoch 8/200 - Train loss: 0.4147 - Val loss: 0.4731 - Train acc: 92.61% - Val acc: 92.93% - Test F1-score: 71.84\nElapsed time: 18.17 seconds\nEpoch 9/200 - Train loss: 0.4100 - Val loss: 0.4982 - Train acc: 92.89% - Val acc: 92.55% - Test F1-score: 72.39\nElapsed time: 17.81 seconds\nEpoch 10/200 - Train loss: 0.4048 - Val loss: 0.4931 - Train acc: 93.01% - Val acc: 92.60% - Test F1-score: 73.21\nElapsed time: 18.05 seconds\nEpoch 11/200 - Train loss: 0.3967 - Val loss: 0.4642 - Train acc: 93.20% - Val acc: 92.66% - Test F1-score: 72.10\nElapsed time: 18.16 seconds\nEpoch 12/200 - Train loss: 0.4010 - Val loss: 0.4885 - Train acc: 93.19% - Val acc: 92.58% - Test F1-score: 72.15\nElapsed time: 18.17 seconds\nEpoch 13/200 - Train loss: 0.4087 - Val loss: 0.5870 - Train acc: 93.32% - Val acc: 89.34% - Test F1-score: 71.39\nElapsed time: 18.34 seconds\nEpoch 14/200 - Train loss: 0.4187 - Val loss: 0.4637 - Train acc: 93.27% - Val acc: 94.11% - Test F1-score: 75.61\nElapsed time: 18.26 seconds\nEpoch 15/200 - Train loss: 0.4036 - Val loss: 0.5041 - Train acc: 93.40% - Val acc: 93.86% - Test F1-score: 74.50\nElapsed time: 18.12 seconds\nEpoch 16/200 - Train loss: 0.3968 - Val loss: 0.4518 - Train acc: 93.57% - Val acc: 94.14% - Test F1-score: 76.11\nElapsed time: 18.31 seconds\nEpoch 17/200 - Train loss: 0.4041 - Val loss: 0.5418 - Train acc: 93.55% - Val acc: 94.08% - Test F1-score: 75.32\nElapsed time: 18.32 seconds\nEpoch 18/200 - Train loss: 0.4013 - Val loss: 0.5002 - Train acc: 93.54% - Val acc: 94.07% - Test F1-score: 74.46\nElapsed time: 18.38 seconds\nEpoch 19/200 - Train loss: 0.3989 - Val loss: 0.6093 - Train acc: 93.77% - Val acc: 93.96% - Test F1-score: 72.87\nElapsed time: 18.21 seconds\nEpoch 20/200 - Train loss: 0.3960 - Val loss: 0.5653 - Train acc: 93.69% - Val acc: 93.70% - Test F1-score: 73.34\nElapsed time: 18.04 seconds\nEpoch 21/200 - Train loss: 0.4062 - Val loss: 0.5711 - Train acc: 93.74% - Val acc: 93.14% - Test F1-score: 71.63\nElapsed time: 17.81 seconds\nEpoch 22/200 - Train loss: 0.4122 - Val loss: 0.5169 - Train acc: 93.92% - Val acc: 93.77% - Test F1-score: 75.67\nElapsed time: 17.94 seconds\nEpoch 23/200 - Train loss: 0.4000 - Val loss: 0.4901 - Train acc: 93.95% - Val acc: 93.76% - Test F1-score: 74.89\nElapsed time: 17.90 seconds\nEpoch 24/200 - Train loss: 0.3957 - Val loss: 0.5449 - Train acc: 93.82% - Val acc: 92.53% - Test F1-score: 74.43\nElapsed time: 17.85 seconds\nEpoch 25/200 - Train loss: 0.4023 - Val loss: 0.5467 - Train acc: 93.80% - Val acc: 93.13% - Test F1-score: 73.93\nElapsed time: 17.96 seconds\nEpoch 26/200 - Train loss: 0.4005 - Val loss: 0.6869 - Train acc: 93.90% - Val acc: 94.33% - Test F1-score: 73.06\nElapsed time: 17.94 seconds\nEpoch 27/200 - Train loss: 0.3987 - Val loss: 0.5312 - Train acc: 94.01% - Val acc: 93.91% - Test F1-score: 73.74\nElapsed time: 17.79 seconds\nEpoch 28/200 - Train loss: 0.3894 - Val loss: 0.5536 - Train acc: 93.94% - Val acc: 92.72% - Test F1-score: 74.18\nElapsed time: 17.92 seconds\nEpoch 29/200 - Train loss: 0.3887 - Val loss: 0.5706 - Train acc: 94.06% - Val acc: 93.10% - Test F1-score: 72.89\nElapsed time: 18.00 seconds\nEpoch 30/200 - Train loss: 0.3837 - Val loss: 0.5413 - Train acc: 94.04% - Val acc: 93.42% - Test F1-score: 75.48\nElapsed time: 17.93 seconds\nEpoch 31/200 - Train loss: 0.2621 - Val loss: 0.4460 - Train acc: 95.24% - Val acc: 93.90% - Test F1-score: 76.65\nElapsed time: 17.98 seconds\nEpoch 32/200 - Train loss: 0.2253 - Val loss: 0.3900 - Train acc: 95.15% - Val acc: 93.61% - Test F1-score: 75.76\nElapsed time: 17.91 seconds\nEpoch 33/200 - Train loss: 0.2200 - Val loss: 0.3973 - Train acc: 94.99% - Val acc: 94.25% - Test F1-score: 76.14\nElapsed time: 17.84 seconds\nEpoch 34/200 - Train loss: 0.2145 - Val loss: 0.4075 - Train acc: 94.91% - Val acc: 94.18% - Test F1-score: 77.44\nElapsed time: 17.89 seconds\nEpoch 35/200 - Train loss: 0.2084 - Val loss: 0.3895 - Train acc: 94.88% - Val acc: 92.65% - Test F1-score: 74.63\nElapsed time: 18.00 seconds\nEpoch 36/200 - Train loss: 0.2063 - Val loss: 0.3652 - Train acc: 94.67% - Val acc: 94.28% - Test F1-score: 74.84\nElapsed time: 18.09 seconds\nEpoch 37/200 - Train loss: 0.2010 - Val loss: 0.3879 - Train acc: 94.64% - Val acc: 94.17% - Test F1-score: 72.78\nElapsed time: 18.36 seconds\nEpoch 38/200 - Train loss: 0.1907 - Val loss: 0.3566 - Train acc: 94.89% - Val acc: 94.48% - Test F1-score: 75.78\nElapsed time: 18.00 seconds\nEpoch 39/200 - Train loss: 0.1916 - Val loss: 0.3777 - Train acc: 94.61% - Val acc: 93.44% - Test F1-score: 73.68\nElapsed time: 17.91 seconds\nEpoch 40/200 - Train loss: 0.1941 - Val loss: 0.3960 - Train acc: 94.61% - Val acc: 93.87% - Test F1-score: 73.88\nElapsed time: 17.92 seconds\nEpoch 41/200 - Train loss: 0.1934 - Val loss: 0.3567 - Train acc: 94.69% - Val acc: 94.11% - Test F1-score: 76.15\nElapsed time: 17.98 seconds\nEpoch 42/200 - Train loss: 0.1914 - Val loss: 0.3496 - Train acc: 94.69% - Val acc: 94.17% - Test F1-score: 74.99\nElapsed time: 17.97 seconds\nEpoch 43/200 - Train loss: 0.1857 - Val loss: 0.3644 - Train acc: 94.62% - Val acc: 94.17% - Test F1-score: 75.18\nElapsed time: 18.07 seconds\nEpoch 44/200 - Train loss: 0.1839 - Val loss: 0.3387 - Train acc: 94.54% - Val acc: 93.90% - Test F1-score: 75.61\nElapsed time: 17.96 seconds\nEpoch 45/200 - Train loss: 0.1858 - Val loss: 0.3736 - Train acc: 94.61% - Val acc: 93.40% - Test F1-score: 73.95\nElapsed time: 17.72 seconds\nEpoch 46/200 - Train loss: 0.1872 - Val loss: 0.3441 - Train acc: 94.58% - Val acc: 93.43% - Test F1-score: 73.81\nElapsed time: 17.87 seconds\nEpoch 47/200 - Train loss: 0.1849 - Val loss: 0.3594 - Train acc: 94.52% - Val acc: 94.09% - Test F1-score: 74.80\nElapsed time: 17.89 seconds\nEpoch 48/200 - Train loss: 0.1814 - Val loss: 0.3283 - Train acc: 94.64% - Val acc: 94.25% - Test F1-score: 75.84\nElapsed time: 18.06 seconds\nEpoch 49/200 - Train loss: 0.1782 - Val loss: 0.3640 - Train acc: 94.56% - Val acc: 93.02% - Test F1-score: 72.73\nElapsed time: 18.00 seconds\nEpoch 50/200 - Train loss: 0.1766 - Val loss: 0.3613 - Train acc: 94.62% - Val acc: 92.73% - Test F1-score: 73.95\nElapsed time: 18.02 seconds\nEpoch 51/200 - Train loss: 0.1834 - Val loss: 0.3794 - Train acc: 94.53% - Val acc: 93.79% - Test F1-score: 72.63\nElapsed time: 17.71 seconds\nEpoch 52/200 - Train loss: 0.1816 - Val loss: 0.3571 - Train acc: 94.51% - Val acc: 93.09% - Test F1-score: 73.52\nElapsed time: 17.92 seconds\nEpoch 53/200 - Train loss: 0.1741 - Val loss: 0.3260 - Train acc: 94.58% - Val acc: 94.17% - Test F1-score: 76.04\nElapsed time: 18.01 seconds\nEpoch 54/200 - Train loss: 0.1762 - Val loss: 0.3602 - Train acc: 94.56% - Val acc: 92.87% - Test F1-score: 75.41\nElapsed time: 17.90 seconds\nEpoch 55/200 - Train loss: 0.1778 - Val loss: 0.3584 - Train acc: 94.53% - Val acc: 92.91% - Test F1-score: 74.43\nElapsed time: 18.08 seconds\nEpoch 56/200 - Train loss: 0.1761 - Val loss: 0.3691 - Train acc: 94.54% - Val acc: 94.06% - Test F1-score: 75.26\nElapsed time: 18.29 seconds\nEpoch 57/200 - Train loss: 0.1778 - Val loss: 0.3388 - Train acc: 94.51% - Val acc: 94.53% - Test F1-score: 75.58\nElapsed time: 18.14 seconds\nEpoch 58/200 - Train loss: 0.1744 - Val loss: 0.3529 - Train acc: 94.47% - Val acc: 93.16% - Test F1-score: 73.86\nElapsed time: 18.11 seconds\nEpoch 59/200 - Train loss: 0.1746 - Val loss: 0.3524 - Train acc: 94.54% - Val acc: 93.91% - Test F1-score: 76.02\nElapsed time: 18.10 seconds\nEpoch 60/200 - Train loss: 0.1810 - Val loss: 0.3603 - Train acc: 94.52% - Val acc: 94.07% - Test F1-score: 74.74\nElapsed time: 18.11 seconds\nEpoch 61/200 - Train loss: 0.1199 - Val loss: 0.2896 - Train acc: 95.44% - Val acc: 94.46% - Test F1-score: 76.73\nElapsed time: 17.90 seconds\nEpoch 62/200 - Train loss: 0.1039 - Val loss: 0.2920 - Train acc: 95.49% - Val acc: 94.71% - Test F1-score: 76.65\nElapsed time: 18.10 seconds\nEpoch 63/200 - Train loss: 0.1036 - Val loss: 0.2930 - Train acc: 95.26% - Val acc: 93.07% - Test F1-score: 75.39\nElapsed time: 17.96 seconds\nEpoch 64/200 - Train loss: 0.1004 - Val loss: 0.2957 - Train acc: 95.22% - Val acc: 94.13% - Test F1-score: 76.14\nElapsed time: 18.05 seconds\nEpoch 65/200 - Train loss: 0.1018 - Val loss: 0.2828 - Train acc: 95.15% - Val acc: 94.20% - Test F1-score: 76.23\nElapsed time: 17.93 seconds\nEpoch 66/200 - Train loss: 0.0979 - Val loss: 0.2759 - Train acc: 95.23% - Val acc: 94.22% - Test F1-score: 75.74\nElapsed time: 17.88 seconds\nEpoch 67/200 - Train loss: 0.0988 - Val loss: 0.2814 - Train acc: 95.19% - Val acc: 94.42% - Test F1-score: 77.25\nElapsed time: 18.09 seconds\nEpoch 68/200 - Train loss: 0.0958 - Val loss: 0.2954 - Train acc: 95.22% - Val acc: 93.33% - Test F1-score: 74.04\nElapsed time: 17.88 seconds\nEpoch 69/200 - Train loss: 0.0939 - Val loss: 0.2802 - Train acc: 95.21% - Val acc: 92.39% - Test F1-score: 75.55\nElapsed time: 17.92 seconds\nEpoch 70/200 - Train loss: 0.0971 - Val loss: 0.2795 - Train acc: 95.04% - Val acc: 94.26% - Test F1-score: 75.10\nElapsed time: 17.95 seconds\nEpoch 71/200 - Train loss: 0.0943 - Val loss: 0.2823 - Train acc: 95.17% - Val acc: 94.06% - Test F1-score: 75.54\nElapsed time: 17.85 seconds\nEpoch 72/200 - Train loss: 0.0940 - Val loss: 0.2809 - Train acc: 95.19% - Val acc: 94.03% - Test F1-score: 76.16\nElapsed time: 17.99 seconds\nEpoch 73/200 - Train loss: 0.0930 - Val loss: 0.2741 - Train acc: 95.06% - Val acc: 94.61% - Test F1-score: 76.06\nElapsed time: 17.86 seconds\nEpoch 74/200 - Train loss: 0.0933 - Val loss: 0.2749 - Train acc: 95.15% - Val acc: 94.46% - Test F1-score: 75.79\nElapsed time: 17.91 seconds\nEpoch 75/200 - Train loss: 0.0929 - Val loss: 0.2772 - Train acc: 95.19% - Val acc: 92.75% - Test F1-score: 74.17\nElapsed time: 17.70 seconds\nEpoch 76/200 - Train loss: 0.0923 - Val loss: 0.2767 - Train acc: 95.02% - Val acc: 94.26% - Test F1-score: 75.17\nElapsed time: 17.96 seconds\nEpoch 77/200 - Train loss: 0.0921 - Val loss: 0.2806 - Train acc: 95.12% - Val acc: 94.07% - Test F1-score: 75.11\nElapsed time: 18.04 seconds\nEpoch 78/200 - Train loss: 0.0934 - Val loss: 0.2733 - Train acc: 95.11% - Val acc: 93.73% - Test F1-score: 75.88\nElapsed time: 18.21 seconds\nEpoch 79/200 - Train loss: 0.0915 - Val loss: 0.2865 - Train acc: 95.14% - Val acc: 92.50% - Test F1-score: 74.50\nElapsed time: 18.48 seconds\nEpoch 80/200 - Train loss: 0.0909 - Val loss: 0.2813 - Train acc: 95.06% - Val acc: 94.05% - Test F1-score: 75.02\nElapsed time: 18.41 seconds\nEpoch 81/200 - Train loss: 0.0925 - Val loss: 0.2851 - Train acc: 95.06% - Val acc: 92.19% - Test F1-score: 74.85\nElapsed time: 18.03 seconds\nEpoch 82/200 - Train loss: 0.0917 - Val loss: 0.2740 - Train acc: 95.17% - Val acc: 93.99% - Test F1-score: 75.90\nElapsed time: 18.13 seconds\nEpoch 83/200 - Train loss: 0.0893 - Val loss: 0.2834 - Train acc: 95.16% - Val acc: 94.12% - Test F1-score: 74.98\nElapsed time: 18.31 seconds\nEpoch 84/200 - Train loss: 0.0898 - Val loss: 0.2745 - Train acc: 95.21% - Val acc: 94.46% - Test F1-score: 75.86\nElapsed time: 18.25 seconds\nEpoch 85/200 - Train loss: 0.0910 - Val loss: 0.2761 - Train acc: 95.12% - Val acc: 93.57% - Test F1-score: 74.82\nElapsed time: 17.86 seconds\nEpoch 86/200 - Train loss: 0.0906 - Val loss: 0.2757 - Train acc: 95.19% - Val acc: 93.96% - Test F1-score: 75.63\nElapsed time: 17.96 seconds\nEpoch 87/200 - Train loss: 0.0897 - Val loss: 0.2730 - Train acc: 95.10% - Val acc: 94.11% - Test F1-score: 75.24\nElapsed time: 17.89 seconds\nEpoch 88/200 - Train loss: 0.0907 - Val loss: 0.2740 - Train acc: 95.04% - Val acc: 93.98% - Test F1-score: 75.07\nElapsed time: 18.09 seconds\nEpoch 89/200 - Train loss: 0.0892 - Val loss: 0.2751 - Train acc: 95.13% - Val acc: 93.83% - Test F1-score: 74.90\nElapsed time: 18.18 seconds\nEpoch 90/200 - Train loss: 0.0896 - Val loss: 0.2762 - Train acc: 95.13% - Val acc: 93.81% - Test F1-score: 74.30\nElapsed time: 18.01 seconds\nEpoch 91/200 - Train loss: 0.0692 - Val loss: 0.2532 - Train acc: 95.87% - Val acc: 93.81% - Test F1-score: 75.59\nElapsed time: 18.11 seconds\nEpoch 92/200 - Train loss: 0.0633 - Val loss: 0.2528 - Train acc: 95.97% - Val acc: 94.97% - Test F1-score: 75.91\nElapsed time: 18.13 seconds\nEpoch 93/200 - Train loss: 0.0624 - Val loss: 0.2536 - Train acc: 95.91% - Val acc: 94.49% - Test F1-score: 75.63\nElapsed time: 18.24 seconds\nEpoch 94/200 - Train loss: 0.0628 - Val loss: 0.2524 - Train acc: 95.82% - Val acc: 94.64% - Test F1-score: 75.73\nElapsed time: 18.21 seconds\nEpoch 95/200 - Train loss: 0.0625 - Val loss: 0.2541 - Train acc: 95.95% - Val acc: 94.19% - Test F1-score: 75.46\nElapsed time: 18.06 seconds\nEpoch 96/200 - Train loss: 0.0627 - Val loss: 0.2604 - Train acc: 95.92% - Val acc: 93.76% - Test F1-score: 75.69\nElapsed time: 18.03 seconds\nEpoch 97/200 - Train loss: 0.0622 - Val loss: 0.2560 - Train acc: 95.88% - Val acc: 94.61% - Test F1-score: 75.03\nElapsed time: 18.02 seconds\nEpoch 98/200 - Train loss: 0.0618 - Val loss: 0.2891 - Train acc: 95.91% - Val acc: 93.93% - Test F1-score: 75.50\nElapsed time: 18.17 seconds\nEpoch 99/200 - Train loss: 0.0618 - Val loss: 0.2603 - Train acc: 95.91% - Val acc: 94.49% - Test F1-score: 75.15\nElapsed time: 18.08 seconds\nEpoch 100/200 - Train loss: 0.0619 - Val loss: 0.2579 - Train acc: 95.87% - Val acc: 93.97% - Test F1-score: 75.58\nElapsed time: 18.25 seconds\nEpoch 101/200 - Train loss: 0.0612 - Val loss: 0.2550 - Train acc: 95.90% - Val acc: 94.50% - Test F1-score: 76.23\nElapsed time: 18.24 seconds\nEpoch 102/200 - Train loss: 0.0617 - Val loss: 0.2585 - Train acc: 95.90% - Val acc: 94.00% - Test F1-score: 75.69\nElapsed time: 18.23 seconds\nEpoch 103/200 - Train loss: 0.0612 - Val loss: 0.2557 - Train acc: 95.87% - Val acc: 94.17% - Test F1-score: 75.14\nElapsed time: 18.27 seconds\nEpoch 104/200 - Train loss: 0.0608 - Val loss: 0.2501 - Train acc: 95.84% - Val acc: 94.98% - Test F1-score: 76.62\nElapsed time: 18.32 seconds\nEpoch 105/200 - Train loss: 0.0610 - Val loss: 0.2585 - Train acc: 95.90% - Val acc: 93.09% - Test F1-score: 74.88\nElapsed time: 18.09 seconds\nEpoch 106/200 - Train loss: 0.0600 - Val loss: 0.2487 - Train acc: 96.02% - Val acc: 94.20% - Test F1-score: 76.11\nElapsed time: 18.23 seconds\nEpoch 107/200 - Train loss: 0.0619 - Val loss: 0.2544 - Train acc: 95.75% - Val acc: 94.75% - Test F1-score: 75.02\nElapsed time: 18.26 seconds\nEpoch 108/200 - Train loss: 0.0613 - Val loss: 0.2519 - Train acc: 95.98% - Val acc: 94.39% - Test F1-score: 75.55\nElapsed time: 18.32 seconds\nEpoch 109/200 - Train loss: 0.0606 - Val loss: 0.2504 - Train acc: 95.90% - Val acc: 94.28% - Test F1-score: 75.65\nElapsed time: 18.23 seconds\nEpoch 110/200 - Train loss: 0.0607 - Val loss: 0.2559 - Train acc: 95.85% - Val acc: 94.67% - Test F1-score: 75.83\nElapsed time: 18.24 seconds\nEpoch 111/200 - Train loss: 0.0608 - Val loss: 0.2535 - Train acc: 95.96% - Val acc: 93.43% - Test F1-score: 74.84\nElapsed time: 18.09 seconds\nEpoch 112/200 - Train loss: 0.0604 - Val loss: 0.2523 - Train acc: 95.95% - Val acc: 93.87% - Test F1-score: 75.53\nElapsed time: 18.19 seconds\nEpoch 113/200 - Train loss: 0.0606 - Val loss: 0.2542 - Train acc: 95.88% - Val acc: 93.03% - Test F1-score: 74.49\nElapsed time: 18.30 seconds\nEpoch 114/200 - Train loss: 0.0613 - Val loss: 0.2518 - Train acc: 95.92% - Val acc: 94.48% - Test F1-score: 75.42\nElapsed time: 18.17 seconds\nEpoch 115/200 - Train loss: 0.0604 - Val loss: 0.2504 - Train acc: 95.99% - Val acc: 94.55% - Test F1-score: 75.96\nElapsed time: 18.17 seconds\nEpoch 116/200 - Train loss: 0.0610 - Val loss: 0.2570 - Train acc: 95.83% - Val acc: 93.41% - Test F1-score: 74.91\nElapsed time: 18.26 seconds\nEpoch 117/200 - Train loss: 0.0604 - Val loss: 0.2511 - Train acc: 95.92% - Val acc: 94.86% - Test F1-score: 76.45\nElapsed time: 18.28 seconds\nEpoch 118/200 - Train loss: 0.0608 - Val loss: 0.2471 - Train acc: 95.99% - Val acc: 94.61% - Test F1-score: 75.45\nElapsed time: 18.33 seconds\nEpoch 119/200 - Train loss: 0.0600 - Val loss: 0.2575 - Train acc: 95.98% - Val acc: 93.72% - Test F1-score: 74.87\nElapsed time: 18.44 seconds\nEpoch 120/200 - Train loss: 0.0605 - Val loss: 0.2828 - Train acc: 95.87% - Val acc: 94.69% - Test F1-score: 75.42\nElapsed time: 18.90 seconds\nEpoch 121/200 - Train loss: 0.0522 - Val loss: 0.2440 - Train acc: 96.51% - Val acc: 94.53% - Test F1-score: 76.22\nElapsed time: 18.44 seconds\nEpoch 122/200 - Train loss: 0.0506 - Val loss: 0.2476 - Train acc: 96.54% - Val acc: 94.54% - Test F1-score: 75.84\nElapsed time: 18.47 seconds\nEpoch 123/200 - Train loss: 0.0502 - Val loss: 0.2438 - Train acc: 96.57% - Val acc: 94.71% - Test F1-score: 75.61\nElapsed time: 18.30 seconds\nEpoch 124/200 - Train loss: 0.0502 - Val loss: 0.2452 - Train acc: 96.48% - Val acc: 94.76% - Test F1-score: 76.27\nElapsed time: 18.68 seconds\nEpoch 125/200 - Train loss: 0.0508 - Val loss: 0.2456 - Train acc: 96.45% - Val acc: 94.94% - Test F1-score: 75.63\nElapsed time: 18.40 seconds\nEpoch 126/200 - Train loss: 0.0507 - Val loss: 0.2440 - Train acc: 96.50% - Val acc: 94.76% - Test F1-score: 76.62\nElapsed time: 18.19 seconds\nEpoch 127/200 - Train loss: 0.0508 - Val loss: 0.2534 - Train acc: 96.47% - Val acc: 94.03% - Test F1-score: 75.82\nElapsed time: 18.20 seconds\nEpoch 128/200 - Train loss: 0.0503 - Val loss: 0.2433 - Train acc: 96.55% - Val acc: 94.73% - Test F1-score: 76.61\nElapsed time: 18.35 seconds\nEpoch 129/200 - Train loss: 0.0500 - Val loss: 0.2459 - Train acc: 96.51% - Val acc: 94.55% - Test F1-score: 76.40\nElapsed time: 18.19 seconds\nEpoch 130/200 - Train loss: 0.0502 - Val loss: 0.2445 - Train acc: 96.51% - Val acc: 94.82% - Test F1-score: 75.82\nElapsed time: 18.21 seconds\nEpoch 131/200 - Train loss: 0.0503 - Val loss: 0.2464 - Train acc: 96.48% - Val acc: 95.05% - Test F1-score: 76.39\nElapsed time: 18.30 seconds\nEpoch 132/200 - Train loss: 0.0502 - Val loss: 0.2442 - Train acc: 96.50% - Val acc: 94.78% - Test F1-score: 76.10\nElapsed time: 18.29 seconds\nEpoch 133/200 - Train loss: 0.0499 - Val loss: 0.2466 - Train acc: 96.53% - Val acc: 94.87% - Test F1-score: 74.95\nElapsed time: 18.23 seconds\nEpoch 134/200 - Train loss: 0.0501 - Val loss: 0.2456 - Train acc: 96.44% - Val acc: 94.76% - Test F1-score: 75.74\nElapsed time: 18.31 seconds\nEpoch 135/200 - Train loss: 0.0504 - Val loss: 0.2494 - Train acc: 96.44% - Val acc: 95.30% - Test F1-score: 76.80\nElapsed time: 18.15 seconds\nEpoch 136/200 - Train loss: 0.0497 - Val loss: 0.2473 - Train acc: 96.52% - Val acc: 94.91% - Test F1-score: 76.32\nElapsed time: 18.33 seconds\nEpoch 137/200 - Train loss: 0.0500 - Val loss: 0.2440 - Train acc: 96.53% - Val acc: 95.02% - Test F1-score: 75.55\nElapsed time: 18.47 seconds\nEpoch 138/200 - Train loss: 0.0499 - Val loss: 0.2458 - Train acc: 96.44% - Val acc: 94.47% - Test F1-score: 76.00\nElapsed time: 18.35 seconds\nEpoch 139/200 - Train loss: 0.0499 - Val loss: 0.2435 - Train acc: 96.57% - Val acc: 94.27% - Test F1-score: 76.10\nElapsed time: 18.33 seconds\nEpoch 140/200 - Train loss: 0.0496 - Val loss: 0.2436 - Train acc: 96.52% - Val acc: 94.85% - Test F1-score: 75.70\nElapsed time: 18.13 seconds\nEpoch 141/200 - Train loss: 0.0494 - Val loss: 0.2430 - Train acc: 96.51% - Val acc: 95.02% - Test F1-score: 76.17\nElapsed time: 18.04 seconds\nEpoch 142/200 - Train loss: 0.0500 - Val loss: 0.2426 - Train acc: 96.48% - Val acc: 94.89% - Test F1-score: 76.72\nElapsed time: 18.15 seconds\nEpoch 143/200 - Train loss: 0.0500 - Val loss: 0.2559 - Train acc: 96.47% - Val acc: 94.59% - Test F1-score: 75.90\nElapsed time: 18.20 seconds\nEpoch 144/200 - Train loss: 0.0496 - Val loss: 0.2449 - Train acc: 96.57% - Val acc: 94.66% - Test F1-score: 76.09\nElapsed time: 18.32 seconds\nEpoch 145/200 - Train loss: 0.0498 - Val loss: 0.2442 - Train acc: 96.51% - Val acc: 94.88% - Test F1-score: 76.70\nElapsed time: 18.18 seconds\nEpoch 146/200 - Train loss: 0.0494 - Val loss: 0.2491 - Train acc: 96.58% - Val acc: 94.92% - Test F1-score: 76.30\nElapsed time: 18.27 seconds\nEpoch 147/200 - Train loss: 0.0499 - Val loss: 0.2476 - Train acc: 96.49% - Val acc: 94.85% - Test F1-score: 75.95\nElapsed time: 18.01 seconds\nEpoch 148/200 - Train loss: 0.0500 - Val loss: 0.2464 - Train acc: 96.53% - Val acc: 94.94% - Test F1-score: 76.51\nElapsed time: 18.10 seconds\nEpoch 149/200 - Train loss: 0.0495 - Val loss: 0.2460 - Train acc: 96.50% - Val acc: 95.10% - Test F1-score: 76.46\nElapsed time: 18.33 seconds\nEpoch 150/200 - Train loss: 0.0493 - Val loss: 0.2434 - Train acc: 96.55% - Val acc: 95.08% - Test F1-score: 76.57\nElapsed time: 18.13 seconds\nEpoch 151/200 - Train loss: 0.0460 - Val loss: 0.2427 - Train acc: 96.81% - Val acc: 94.90% - Test F1-score: 76.21\nElapsed time: 18.35 seconds\nEpoch 152/200 - Train loss: 0.0453 - Val loss: 0.2421 - Train acc: 96.88% - Val acc: 95.32% - Test F1-score: 77.08\nElapsed time: 18.16 seconds\nEpoch 153/200 - Train loss: 0.0454 - Val loss: 0.2445 - Train acc: 96.86% - Val acc: 95.01% - Test F1-score: 76.46\nElapsed time: 17.95 seconds\nEpoch 154/200 - Train loss: 0.0453 - Val loss: 0.2435 - Train acc: 96.87% - Val acc: 94.83% - Test F1-score: 76.19\nElapsed time: 18.16 seconds\nEpoch 155/200 - Train loss: 0.0453 - Val loss: 0.2447 - Train acc: 96.79% - Val acc: 94.97% - Test F1-score: 76.32\nElapsed time: 18.12 seconds\nEpoch 156/200 - Train loss: 0.0453 - Val loss: 0.2510 - Train acc: 96.91% - Val acc: 95.03% - Test F1-score: 76.66\nElapsed time: 18.39 seconds\nEpoch 157/200 - Train loss: 0.0454 - Val loss: 0.2441 - Train acc: 96.76% - Val acc: 95.01% - Test F1-score: 76.99\nElapsed time: 18.10 seconds\nEpoch 158/200 - Train loss: 0.0455 - Val loss: 0.2436 - Train acc: 96.83% - Val acc: 94.88% - Test F1-score: 76.64\nElapsed time: 18.20 seconds\nEpoch 159/200 - Train loss: 0.0456 - Val loss: 0.2440 - Train acc: 96.78% - Val acc: 95.02% - Test F1-score: 76.79\nElapsed time: 17.99 seconds\nEpoch 160/200 - Train loss: 0.0456 - Val loss: 0.2543 - Train acc: 96.82% - Val acc: 95.14% - Test F1-score: 76.22\nElapsed time: 18.15 seconds\nEpoch 161/200 - Train loss: 0.0451 - Val loss: 0.2446 - Train acc: 96.85% - Val acc: 94.82% - Test F1-score: 75.93\nElapsed time: 18.35 seconds\nEpoch 162/200 - Train loss: 0.0455 - Val loss: 0.2460 - Train acc: 96.85% - Val acc: 95.17% - Test F1-score: 76.95\nElapsed time: 18.71 seconds\nEpoch 163/200 - Train loss: 0.0454 - Val loss: 0.2447 - Train acc: 96.84% - Val acc: 95.08% - Test F1-score: 76.82\nElapsed time: 18.86 seconds\nEpoch 164/200 - Train loss: 0.0453 - Val loss: 0.2460 - Train acc: 96.85% - Val acc: 95.02% - Test F1-score: 76.71\nElapsed time: 18.64 seconds\nEpoch 165/200 - Train loss: 0.0455 - Val loss: 0.2448 - Train acc: 96.84% - Val acc: 94.95% - Test F1-score: 76.61\nElapsed time: 18.53 seconds\nEpoch 166/200 - Train loss: 0.0451 - Val loss: 0.2444 - Train acc: 96.89% - Val acc: 95.08% - Test F1-score: 76.73\nElapsed time: 18.65 seconds\nEpoch 167/200 - Train loss: 0.0453 - Val loss: 0.2450 - Train acc: 96.83% - Val acc: 94.84% - Test F1-score: 76.51\nElapsed time: 18.63 seconds\nEpoch 168/200 - Train loss: 0.0452 - Val loss: 0.2455 - Train acc: 96.80% - Val acc: 95.01% - Test F1-score: 76.77\nElapsed time: 18.42 seconds\nEpoch 169/200 - Train loss: 0.0450 - Val loss: 0.2471 - Train acc: 96.84% - Val acc: 95.05% - Test F1-score: 76.43\nElapsed time: 18.36 seconds\nEpoch 170/200 - Train loss: 0.0452 - Val loss: 0.2469 - Train acc: 96.82% - Val acc: 95.02% - Test F1-score: 76.85\nElapsed time: 18.18 seconds\nEpoch 171/200 - Train loss: 0.0454 - Val loss: 0.2450 - Train acc: 96.81% - Val acc: 94.98% - Test F1-score: 76.75\nElapsed time: 18.04 seconds\nEpoch 172/200 - Train loss: 0.0453 - Val loss: 0.2442 - Train acc: 96.84% - Val acc: 95.11% - Test F1-score: 76.29\nElapsed time: 18.07 seconds\nEpoch 173/200 - Train loss: 0.0450 - Val loss: 0.2437 - Train acc: 96.84% - Val acc: 95.21% - Test F1-score: 76.14\nElapsed time: 18.24 seconds\nEpoch 174/200 - Train loss: 0.0453 - Val loss: 0.2460 - Train acc: 96.86% - Val acc: 94.85% - Test F1-score: 76.11\nElapsed time: 18.05 seconds\nEpoch 175/200 - Train loss: 0.0452 - Val loss: 0.2432 - Train acc: 96.86% - Val acc: 95.12% - Test F1-score: 76.37\nElapsed time: 18.29 seconds\nEpoch 176/200 - Train loss: 0.0451 - Val loss: 0.2445 - Train acc: 96.87% - Val acc: 94.94% - Test F1-score: 76.51\nElapsed time: 18.26 seconds\nEpoch 177/200 - Train loss: 0.0451 - Val loss: 0.2442 - Train acc: 96.85% - Val acc: 95.11% - Test F1-score: 76.83\nElapsed time: 17.84 seconds\nEpoch 178/200 - Train loss: 0.0449 - Val loss: 0.2436 - Train acc: 96.85% - Val acc: 95.05% - Test F1-score: 76.34\nElapsed time: 18.19 seconds\nEpoch 179/200 - Train loss: 0.0453 - Val loss: 0.2466 - Train acc: 96.85% - Val acc: 95.05% - Test F1-score: 77.07\nElapsed time: 18.15 seconds\nEpoch 180/200 - Train loss: 0.0452 - Val loss: 0.2452 - Train acc: 96.89% - Val acc: 95.08% - Test F1-score: 76.22\nElapsed time: 18.27 seconds\nEpoch 181/200 - Train loss: 0.0433 - Val loss: 0.2470 - Train acc: 96.97% - Val acc: 95.09% - Test F1-score: 76.40\nElapsed time: 18.18 seconds\nEpoch 182/200 - Train loss: 0.0434 - Val loss: 0.2449 - Train acc: 97.05% - Val acc: 95.05% - Test F1-score: 76.53\nElapsed time: 18.13 seconds\nEpoch 183/200 - Train loss: 0.0431 - Val loss: 0.2541 - Train acc: 96.96% - Val acc: 95.03% - Test F1-score: 76.47\nElapsed time: 17.89 seconds\nEpoch 184/200 - Train loss: 0.0430 - Val loss: 0.2450 - Train acc: 97.02% - Val acc: 95.16% - Test F1-score: 76.42\nElapsed time: 18.00 seconds\nEpoch 185/200 - Train loss: 0.0431 - Val loss: 0.2446 - Train acc: 97.03% - Val acc: 95.16% - Test F1-score: 76.52\nElapsed time: 18.07 seconds\nEpoch 186/200 - Train loss: 0.0430 - Val loss: 0.2454 - Train acc: 96.97% - Val acc: 95.09% - Test F1-score: 76.05\nElapsed time: 18.00 seconds\nEpoch 187/200 - Train loss: 0.0430 - Val loss: 0.2469 - Train acc: 97.03% - Val acc: 95.08% - Test F1-score: 76.26\nElapsed time: 18.06 seconds\nEpoch 188/200 - Train loss: 0.0430 - Val loss: 0.2443 - Train acc: 97.06% - Val acc: 95.07% - Test F1-score: 76.39\nElapsed time: 18.04 seconds\nEpoch 189/200 - Train loss: 0.0430 - Val loss: 0.2467 - Train acc: 97.03% - Val acc: 95.16% - Test F1-score: 76.67\nElapsed time: 18.11 seconds\nEpoch 190/200 - Train loss: 0.0430 - Val loss: 0.2452 - Train acc: 96.97% - Val acc: 95.14% - Test F1-score: 76.22\nElapsed time: 18.25 seconds\nEpoch 191/200 - Train loss: 0.0432 - Val loss: 0.2445 - Train acc: 97.00% - Val acc: 95.08% - Test F1-score: 76.13\nElapsed time: 18.10 seconds\nEpoch 192/200 - Train loss: 0.0432 - Val loss: 0.2458 - Train acc: 96.99% - Val acc: 95.00% - Test F1-score: 76.45\nElapsed time: 18.17 seconds\nEpoch 193/200 - Train loss: 0.0430 - Val loss: 0.2471 - Train acc: 97.04% - Val acc: 94.91% - Test F1-score: 76.25\nElapsed time: 18.08 seconds\nEpoch 194/200 - Train loss: 0.0431 - Val loss: 0.2438 - Train acc: 97.00% - Val acc: 95.11% - Test F1-score: 76.50\nElapsed time: 17.98 seconds\nEpoch 195/200 - Train loss: 0.0430 - Val loss: 0.2440 - Train acc: 96.98% - Val acc: 95.01% - Test F1-score: 76.47\nElapsed time: 18.04 seconds\nEpoch 196/200 - Train loss: 0.0432 - Val loss: 0.2435 - Train acc: 96.98% - Val acc: 95.04% - Test F1-score: 76.08\nElapsed time: 18.26 seconds\nEpoch 197/200 - Train loss: 0.0429 - Val loss: 0.2452 - Train acc: 97.01% - Val acc: 95.13% - Test F1-score: 76.29\nElapsed time: 18.04 seconds\nEpoch 198/200 - Train loss: 0.0431 - Val loss: 0.2439 - Train acc: 96.99% - Val acc: 95.15% - Test F1-score: 76.24\nElapsed time: 18.04 seconds\nEpoch 199/200 - Train loss: 0.0429 - Val loss: 0.2452 - Train acc: 97.02% - Val acc: 95.20% - Test F1-score: 76.27\nElapsed time: 18.09 seconds\nEpoch 200/200 - Train loss: 0.0429 - Val loss: 0.2439 - Train acc: 97.00% - Val acc: 95.03% - Test F1-score: 76.37\nElapsed time: 18.20 seconds\n","output_type":"stream"}]},{"cell_type":"code","source":"\nplt.figure(figsize=(12, 8))\nplt.title(f\"Training and Validation Loss and Accuracy\")\n\n# Plot training and validation loss\nplt.plot(t1, label='Train loss', color='blue')\nplt.plot(t4, label='Validation loss', color='red')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nax2 = plt.twinx()\n\n# Plot training and validation accuracy\nax2.plot(t2, label='Train accuracy', color='orange')\nax2.plot(t3, label='Validation accuracy', color='green')\nax2.set_ylabel('Accuracy (%)')\n\n# Plot test F1-score\nax2.plot(t5, label='F1-score', linestyle='dashed', color='purple')\n\nplt.legend(loc='upper right')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T02:44:36.728350Z","iopub.execute_input":"2024-05-17T02:44:36.729536Z","iopub.status.idle":"2024-05-17T02:44:37.143734Z","shell.execute_reply.started":"2024-05-17T02:44:36.729492Z","shell.execute_reply":"2024-05-17T02:44:37.142791Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"evaluate_model(model, test_loader, loss_fn, \"LogEucResNet_spec_d1_7\", \"Confusion Matrix for LogEucResNet_spec_d1_7\", combo=False, temp=True)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Compute some TSNE visualization of the embedding","metadata":{}},{"cell_type":"code","source":"\ndef gen_features(net,dataloader):\n    net.eval()\n    targets_list = []\n    outputs_list = []\n\n    with th.no_grad():\n        for idx, (x1,x2, targets) in enumerate(dataloader):\n            x1 = x1.to(device)\n            x2 = x2.to(device)\n            targets = targets.to(device)\n            targets_np = targets.data.cpu().numpy()\n\n            outputs = net(x1,x2)\n            outputs_np = outputs.data.cpu().numpy()\n            \n            targets_list.append(targets_np[:, np.newaxis])\n            outputs_list.append(outputs_np)\n            \n            if ((idx+1) % 10 == 0) or (idx+1 == len(dataloader)):\n                print(idx+1, '/', len(dataloader))\n\n    targets = np.concatenate(targets_list, axis=0)\n    outputs = np.concatenate(outputs_list, axis=0).astype(np.float64)\n\n    return targets, outputs\n\ndef tsne_plot(save_dir, targets, outputs):\n    print('generating t-SNE plot...')\n    # tsne_output = bh_sne(outputs)\n    tsne = TSNE(random_state=42, perplexity=50)\n    tsne_output = tsne.fit_transform(targets)\n\n    df = pd.DataFrame(tsne_output, columns=['x', 'y'])\n    df['outputs'] = outputs\n\n\n    #custom_palette = sns.color_palette(\"husl\", n_colors=len(df['outputs'].unique()))\n\n\n    plt.rcParams['figure.figsize'] = 10, 10\n    sns.scatterplot(\n        x='x', y='y',\n        hue='outputs',\n        palette=sns.color_palette(\"tab20\", 11),#custom_palette,#\n        data=df,\n        marker='o',\n        legend=\"full\",\n        alpha=0.5\n    )\n\n    plt.xticks([])\n    plt.yticks([])\n    plt.title('t-SNE plot of the embeddings: After training')\n    plt.xlabel('')\n    plt.ylabel('')\n\n    #plt.savefig(os.path.join(save_dir,'tsne_2.png'), bbox_inches='tight')\n    print('done!')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"targets, outputs = gen_features(model,test_loader)\ntsne_plot('.', outputs, targets)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}