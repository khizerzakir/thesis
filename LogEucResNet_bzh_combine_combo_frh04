{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8207310,"sourceType":"datasetVersion","datasetId":4863207},{"sourceId":8386035,"sourceType":"datasetVersion","datasetId":4987693},{"sourceId":8507305,"sourceType":"datasetVersion","datasetId":5078021},{"sourceId":8508155,"sourceType":"datasetVersion","datasetId":5078635},{"sourceId":8508333,"sourceType":"datasetVersion","datasetId":5078768},{"sourceId":8508811,"sourceType":"datasetVersion","datasetId":5079099},{"sourceId":8516530,"sourceType":"datasetVersion","datasetId":5084664},{"sourceId":8516689,"sourceType":"datasetVersion","datasetId":5084773},{"sourceId":8521585,"sourceType":"datasetVersion","datasetId":5088178},{"sourceId":8653421,"sourceType":"datasetVersion","datasetId":5178023},{"sourceId":8658509,"sourceType":"datasetVersion","datasetId":5179467},{"sourceId":176224317,"sourceType":"kernelVersion"},{"sourceId":178092775,"sourceType":"kernelVersion"},{"sourceId":178093471,"sourceType":"kernelVersion"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\nimport subprocess\nimport sys\nsys.path.insert(0,'..')\nfrom pathlib import Path\nimport os\nimport random\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn.functional import one_hot\nfrom torch import Tensor\nfrom typing import Union\n\nimport matplotlib.pylab as plt\n\nimport time\nimport numpy as np\nimport torch as th\nimport torch.nn as nn\nfrom torch.utils import data\nfrom torch.utils.data import Dataset, DataLoader, SubsetRandomSampler, WeightedRandomSampler\nimport torch.optim.lr_scheduler as lr_scheduler\n\nfrom focal_loss import FocalLoss\nfrom utils import _axat, _atxa, _mvmt\nimport seaborn as sns\n\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package],\n                         stdout=subprocess.DEVNULL,\n                         stderr=subprocess.DEVNULL\n                         )\nrequired_packages = [\n    \"geoopt\",\n    \"pyriemann\",\n]\nfor package in required_packages:\n    try:\n        __import__(package)\n        print(f\"{package} is already installed.\")\n    except ImportError:\n        print(f\"{package} is not installed. Installing...\")\n        install(package)\n\nimport geoopt\nfrom pyriemann.utils.covariance import covariances, normalize\n\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.manifold import TSNE\nimport pandas as pd\n\n\nuse_cuda = th.cuda.is_available()\ndevice = th.device(\"cuda:0\" if use_cuda else \"cpu\")\nprint(device)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:14.102756Z","iopub.execute_input":"2024-06-11T13:57:14.103158Z","iopub.status.idle":"2024-06-11T13:57:17.959025Z","shell.execute_reply.started":"2024-06-11T13:57:14.103128Z","shell.execute_reply":"2024-06-11T13:57:17.957912Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"geoopt is already installed.\npyriemann is already installed.\ncpu\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Defining Flags and Variables","metadata":{}},{"cell_type":"code","source":"\n# Flags and Parameters\nroot_dir = r\"/kaggle/input/bzh-data-frh-01-02-03\"\nnpz_file = \"bzh_interpolated_data_fr_04_98_p_norm_data.npz\"\nnpz_file1 = \"bzh_interpolated_data_fr_01_98_p_norm_data.npz\"\nnpz_file2 = \"bzh_interpolated_data_fr_02_98_p_norm_data.npz\"\nnpz_file3 = \"bzh_interpolated_data_fr_03_98_p_norm_data.npz\"\nfolder_name = \"bzh_comb_combo\"\ntest_index = 0\nos.makedirs(folder_name, exist_ok=True)\ncombine = True\nbatch_size = 64  # batch size\nn_classes = 7\nrandom_seed = 42\ntest_size = 0.2\nval_size = 0.5\ntemp = False  # Whether the data is in temporal mode\nval = False # Whether to create a validation loader\ncombo = True  # Whether the data is in combo mode\ncheckpoint_path = \"/kaggle/input/model-path-combo/bzh_comb_combo/best_model.pth\"\nmodel_name = \"bzh_comb_combo\"\nfigure_name = \"CM_bzh_comb_combo\"\ntsne_fig_name =\"Tsne_bzh_comb_combo\"\nplot_figure_name = \"training_validation_results_bzh_comb_combo\"\n\n# for model\nlr=1e-2\nepochs=200\ngamma_value=0.95\nloss = \"focal\"\ngamma_loss = 3\nstep_size=30\nstep_lr = False\nlinear_classif = False\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:17.964780Z","iopub.execute_input":"2024-06-11T13:57:17.965095Z","iopub.status.idle":"2024-06-11T13:57:17.973806Z","shell.execute_reply.started":"2024-06-11T13:57:17.965068Z","shell.execute_reply":"2024-06-11T13:57:17.972618Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"## Model, Dataset, and Classifier definition","metadata":{}},{"cell_type":"code","source":"class BusemanSimilarityClassifier(nn.Module):\n    def busemann_spd(self, logM):\n        \"\"\"\n        Compute the Busemann similarity for Symmetric Positive Definite (SPD) matrices.\n        \n        :param logM: Logarithm of SPD matrices, shape (b, n, n)\n        :return: Similarity scores, shape (b, n_proto)\n        \"\"\"\n        return logM.reshape(logM.shape[0], -1) @ self.proto.reshape(self.proto.shape[0], -1).T\n    def __init__(self,dim1,n_proto,n_classes,optim_proto=True):\n        super().__init__()\n        self.n_proto = n_proto\n        self.n_classes = n_classes\n        self.dim1 = dim1\n        \n        self.manifold = geoopt.Stiefel()\n\n        # Random projection directions, shape (d-1, num_projections)\n        theta = np.random.normal(size=(self.n_proto, self.dim1))\n        theta = th.nn.functional.normalize(th.from_numpy(theta), p=2, dim=-1).type(th.float64).to(device)\n        #self.D = theta[:,None] * th.eye(theta.shape[-1],dtype=th.float64, device=device)\n        self.register_parameter(\"theta_proto\", geoopt.ManifoldParameter(theta, geoopt.Sphere()))\n        #self.theta_proto=theta\n\n        ## Random orthogonal matrices\n        Z = th.randn((self.n_proto, self.dim1, self.dim1), dtype=th.float64, device=device)\n        self.Q = th.svd(Z)[0]\n        self.manifold.assert_check_point_on_manifold(self.Q)\n        self.register_parameter(\"Q_proto\", geoopt.ManifoldParameter(self.Q, self.manifold))\n        self.proto = _mvmt(self.Q_proto, self.theta_proto, self.Q_proto)\n        # linear layer\n        self.linear = nn.Linear(self.n_proto, self.n_classes).double()\n\n    def forward(self, x):\n        self.proto = _mvmt(self.Q_proto, self.theta_proto, self.Q_proto)\n        y = self.linear(self.busemann_spd(x))#.view(sim_embedding.shape[0], -1))\n        return y\n    \n    def embed(self, x):\n        self.proto = _mvmt(self.Q_proto, self.theta_proto, self.Q_proto)\n        return self.busemann_spd(x)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:17.975893Z","iopub.execute_input":"2024-06-11T13:57:17.976357Z","iopub.status.idle":"2024-06-11T13:57:17.992880Z","shell.execute_reply.started":"2024-06-11T13:57:17.976316Z","shell.execute_reply":"2024-06-11T13:57:17.991796Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"def regularize_matrix(matrix, epsilon=1e-10):\n    \"\"\"\n    Adds a small value to the diagonal elements of the matrix to regularize it.\n    \"\"\"\n    identity = th.eye(matrix.size(-1), device=matrix.device, dtype=matrix.dtype) * epsilon\n    return matrix + identity\n\n#apply regularized shrinkage to the matrix\ndef regularized_shrinkage(matrix, shrinkage=0.5, epsilon=1e-10):\n    \"\"\"\n    Apply regularized shrinkage to the matrix.\n    \"\"\"\n    identity = th.eye(matrix.size(-1), device=matrix.device, dtype=matrix.dtype) * epsilon\n    return shrinkage * matrix + (1 - shrinkage) * identity\n\nclass LogEucRResNet(nn.Module):\n    def __init__(self, inputdim=10, dim1=8, n_proto=8, classes=7, embed_only=False, linear_classif=False):\n        super().__init__()\n        self.inputdim = inputdim\n        self.dim1 = dim1\n        self.n_proto = n_proto\n        self.classes = classes\n        self.embed_only = embed_only\n        self.linear_classif = linear_classif\n\n        self.manifold_Stiefel = geoopt.Stiefel()\n        self.manifold_SPD = geoopt.SymmetricPositiveDefinite(\"LEM\")\n        \n        # init first bimap\n        bm1 = th.randn((1, self.inputdim, self.dim1), dtype=th.float64)\n        bm1 = th.svd(bm1)[0]\n        self.register_parameter(\"bimap1\", geoopt.ManifoldParameter(bm1, self.manifold_Stiefel))\n        \n        P = th.randn((1, self.dim1, self.dim1), dtype=th.float64)\n        P = th.svd(P)[0]\n\n        self.register_parameter(\"P1\", geoopt.ManifoldParameter(P, self.manifold_Stiefel))\n\n        self.classiflayer=BusemanSimilarityClassifier(self.dim1,self.n_proto, classes)\n        self.fc_layer = nn.Linear(self.dim1 * self.dim1, self.classes).double()\n        self.softmax =  nn.Softmax(dim=-1)\n\n        self.spectrum_map = nn.Sequential(\n            nn.Conv1d(1, 10, 5, padding=\"same\").double(),\n            nn.LeakyReLU(),\n            nn.BatchNorm1d(10).double(),\n            nn.Conv1d(10, 5, 3, padding=\"same\").double(),\n            nn.LeakyReLU(),\n            nn.BatchNorm1d(5).double(),\n            nn.Conv1d(5, 1, 3, padding=\"same\").double(),\n        )\n        \n    def forward(self, x):\n        x = _atxa(self.bimap1, x)\n        # print(\"I am x\", x)\n        # x = regularize_matrix(x)\n        x = regularized_shrinkage(x)\n        # print(\"I am x after\", x)\n        evecs, eigs, _ = th.svd(x)\n        f_eigs = self.spectrum_map(eigs) # spectral map\n        v1 = _mvmt(self.P1, f_eigs, self.P1)            \n        v1 = self.manifold_SPD.proju(x, v1)\n        eigs = th.clamp(eigs, 1e-8, 1e8)\n        log_x = _mvmt(evecs, th.log(eigs), evecs)     \n        x = log_x + v1\n        if self.embed_only:\n            return x.reshape(x.shape[0],-1)\n        elif self.linear_classif:\n            return self.softmax(self.fc_layer(x.reshape(x.shape[0],-1)))\n        else:\n            return self.softmax(self.classiflayer(x)) # Buseman Similarity Classifier when single modality is used\n    def partial_forward(self, x):\n        x = _atxa(self.bimap1, x)\n        evecs, eigs, _ = th.svd(x)\n        f_eigs = self.spectrum_map(eigs)\n        v1 = _mvmt(self.P1, f_eigs, self.P1)\n        v1 = self.manifold_SPD.proju(x, v1)\n        eigs = th.clamp(eigs, 1e-8, 1e8)\n        log_x = _mvmt(evecs, th.log(eigs), evecs)\n        x = log_x + v1\n        return self.classiflayer.embed(x)\n            \nclass LogEucRResNet_Combo(nn.Module):\n    def __init__(self, inputdim_temp=71, dim1_temp=57, inputdim_spec=10, dim1_spec=8, n_proto=8, classes=7, buseman_classif=True):\n        super().__init__()\n        self.classes = classes\n        self.buseman_classif = buseman_classif\n        self.model_temp = LogEucRResNet(inputdim_temp, dim1_temp, n_proto, embed_only=True)\n        self.model_spectral = LogEucRResNet(inputdim_spec, dim1_spec, n_proto, embed_only=True)\n        \n        self.classiflayer_temp = BusemanSimilarityClassifier(dim1_temp, n_proto, classes)\n        self.classiflayer_spec = BusemanSimilarityClassifier(dim1_spec, n_proto, classes)\n        \n        if linear_classif:\n            self.fc_layer = nn.Linear(dim1_spec*dim1_spec+dim1_temp*dim1_temp, classes).double()\n        else:\n            self.fc_layer = nn.Linear(classes*2, classes).double()        \n        self.softmax = nn.Softmax(dim=-1)\n        \n    def forward(self, x1, x2):\n        out_1 = self.model_temp(x1)\n        out_2 = self.model_spectral(x2)\n        \n        if self.buseman_classif:\n            out_temp = self.classiflayer_temp(out_1)\n            # print(out_temp.shape)\n            out_spec = self.classiflayer_spec(out_2)\n            # print(out_spec.shape)\n            x = th.cat((out_temp, out_spec), dim=1)\n            # print(x.shape)\n        else:\n            x = th.concat((out_1, out_2), dim=1)\n            # print(x.shape)\n            \n        return self.softmax(self.fc_layer(x))\n\n    def partial_forward(self, x1, x2):\n        out_1 = self.model_temp.partial_forward(x1)\n        out_2 = self.model_spectral.partial_forward(x2)\n        x = th.concat((out_1, out_2), dim=1)\n        return self.classiflayer.embed(x)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:17.996237Z","iopub.execute_input":"2024-06-11T13:57:17.996658Z","iopub.status.idle":"2024-06-11T13:57:18.021537Z","shell.execute_reply.started":"2024-06-11T13:57:17.996625Z","shell.execute_reply":"2024-06-11T13:57:18.020280Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"class TS_COV(Dataset):\n    def __init__(self, root_dir, np_file, estimator='scm', combo=True, temp=False):\n        self.root_dir = root_dir\n        self.np_file = np_file\n        self.estimator = estimator\n        self.assume_centered = True\n        self.combo = combo\n        self.temp = temp\n        self.x, self.y, self.class_names = self.load_data()\n        #self.cov = normalize(self.calculate_covariances(),'corr')\n        self.x1 = self.calculate_covariances_36()\n        self.x2 = self.calculate_covariances_10()\n    \n    def __len__(self):\n        return len(self.x)\n\n    def __getitem__(self, idx):\n        x1, x2= self.x1[idx], self.x2[idx]\n        y_sample = self.y[idx]\n        class_name = self.class_names[y_sample]\n        x1 = th.from_numpy(np.asarray([x1])).double()\n        x2 = th.from_numpy(np.asarray([x2])).double()\n        x1,x2 = x1.reshape(1, 71, 71), x2.reshape(1, 10, 10)\n        y = th.from_numpy(np.array(y_sample)).long()\n        if self.combo:\n            return x1,x2, y\n        elif self.temp:\n            return x1, y\n        else:\n            return x2, y\n\n    def load_data(self):\n        file_path = os.path.join(self.root_dir, self.np_file)\n        data = np.load(file_path, allow_pickle= True)\n        x = data['series']\n        y = data['labels']\n        class_names = data['class_names']\n        return x, y, class_names\n\n    def calculate_covariances_10(self):\n        x_transposed = np.transpose(self.x, (0, 2, 1))\n        cov = covariances(x_transposed, estimator=self.estimator, assume_centered=self.assume_centered)\n        return cov\n    def calculate_covariances_36(self):\n        cov = covariances(self.x, estimator=self.estimator, assume_centered=self.assume_centered)\n        return cov","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:18.022904Z","iopub.execute_input":"2024-06-11T13:57:18.023356Z","iopub.status.idle":"2024-06-11T13:57:18.037835Z","shell.execute_reply.started":"2024-06-11T13:57:18.023319Z","shell.execute_reply":"2024-06-11T13:57:18.036774Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"## Helper functions","metadata":{}},{"cell_type":"code","source":"import torch.utils\n\n\ndef initialize_model(combo=True, linear_classif=True, temp=False, device=device):\n    if combo:\n        if linear_classif:\n            model = LogEucRResNet_Combo(buseman_classif=False).to(device)\n            print(\"Combo model with linear classifier\")\n        else:\n            model = LogEucRResNet_Combo(buseman_classif=True).to(device)\n            print(\"Combo model with Buseman classifier\")\n    elif temp:\n        if linear_classif:\n            inputdim = 71\n            dim1 = 57\n            model = LogEucRResNet(inputdim, dim1, linear_classif=True).to(device)\n            print(\"Single modality - Temp model with linear classifier\")\n        else:\n            inputdim = 71\n            dim1 = 57\n            model = LogEucRResNet(inputdim, dim1, linear_classif=False).to(device)\n            print(\"Single modality - Temp model with Buseman classifier\")\n    else:\n        if linear_classif:\n            inputdim = 10\n            dim1 = 8\n            model = LogEucRResNet(inputdim, dim1, linear_classif=True).to(device)\n            print(\"Single modality - Spectral model with linear classifier\")\n        else:\n            inputdim = 10\n            dim1 = 8\n            model = LogEucRResNet(inputdim, dim1, linear_classif=False).to(device)\n            print(\"Single modality - Spectral model with Buseman classifier\")\n\n    # Get number of trainable parameters\n    model.eval()\n    trainable_total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    print(f'Trainable total parameters: {trainable_total_params}')\n    return model\n\n# calculate the weights for the classes\ndef calculate_class_weights(labels):\n    class_sample_count = np.array([len(np.where(labels == t)[0]) for t in np.unique(labels)])\n    weight = 1 - class_sample_count / len(labels)\n    return th.from_numpy(weight).double()\n# data loaders\ndef create_data_loaders(dataset, train_indices, val_indices, test_indices, batch_size, val=True):\n    train_loader = DataLoader(dataset, batch_size=batch_size, sampler=SubsetRandomSampler(train_indices))\n    test_loader = DataLoader(dataset, batch_size=batch_size, sampler=SubsetRandomSampler(test_indices), shuffle=False)\n    \n    if val:\n        val_loader = DataLoader(dataset, batch_size=batch_size, sampler=SubsetRandomSampler(val_indices))\n        return train_loader, val_loader, test_loader\n    else:\n        return train_loader, test_loader\ndef create_dataloaders(test_index, dataset1, dataset2, dataset3, dataset4, batch_size=batch_size):\n    # Create a list of datasets excluding the test dataset\n    train_datasets = [dataset1, dataset2, dataset3, dataset4]\n    del train_datasets[test_index]\n\n    # Save labels for all datasets\n    all_labels = []\n    for dataset in train_datasets:\n        all_labels.append(dataset.y)  # Assuming y is the attribute that holds labels in each dataset\n\n    # Combine the remaining datasets for training\n    train_dataset = torch.utils.data.ConcatDataset(train_datasets)\n\n    # Create data loaders\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    test_loader = DataLoader(train_datasets[test_index], batch_size=batch_size, shuffle=False)\n\n    return train_loader, test_loader, all_labels\n\n# plotting data distribution\ndef plot_class_distribution(train_loader, val_loader, test_loader, n_classes, combo=False, folder_name=folder_name):\n    class_names = test_loader.dataset.class_names\n    \n    def count_labels(loader, n_classes):\n        counts = np.zeros(n_classes)\n        for batch in loader:\n            if combo:\n                _, _, labels = batch  # x1, x2, labels\n            else:\n                _, labels = batch  # x, labels\n            for l in labels:\n                counts[l] += 1\n        return counts\n\n    train_counts = count_labels(train_loader, n_classes)\n    \n    if val_loader is not None:\n        val_counts = count_labels(val_loader, n_classes)\n    else:\n        val_counts = np.zeros(n_classes)\n    \n    test_counts = count_labels(test_loader, n_classes)\n\n    # Bar plot\n    plt.figure(figsize=(12, 6))\n    plt.bar(np.arange(n_classes) - test_size, train_counts, 0.2, label='Train')\n    if val_loader is not None:\n        plt.bar(np.arange(n_classes), val_counts, 0.2, label='Validation')\n    plt.bar(np.arange(n_classes) + 0.2, test_counts, 0.2, label='Test')\n    plt.xlabel('Classes')\n    plt.ylabel('Count')\n    plt.yscale('log')\n    if val_loader is not None:\n        plt.title('Class Distribution in Train, Validation, and Test Sets')\n    else:\n        plt.title('Class Distribution in Train and Test Sets')\n    plt.xticks(np.arange(n_classes), class_names, rotation=45)\n    plt.legend(loc='best')\n    plt.show()\n\n    plt.figure(figsize=(12, 6))\n    plt.bar(np.arange(n_classes), train_counts, alpha=0.5, label='Train')\n    plt.bar(np.arange(n_classes), val_counts, alpha=0.5, label='Validation')\n    plt.bar(np.arange(n_classes), test_counts, alpha=0.5, label='Test')\n    plt.xlabel('Classes')\n    plt.ylabel('Count')\n    plt.yscale('log')\n    if val_loader is not None:\n        plt.title('Histogram of Class Distribution in Train, Validation, and Test Sets')\n    else:\n        plt.title('Histogram of Class Distribution in Train and Test Sets')\n    plt.xticks(np.arange(n_classes), class_names, rotation=45)\n    plt.legend(loc='best')\n    plt.show()\n\n    # Create a table with the counts\n    data = {\n        'Class': class_names,\n        'Train': train_counts,\n        'Validation': val_counts,\n        'Test': test_counts\n    }\n    df = pd.DataFrame(data)\n    \n    # Print the table\n    print(\"\\nClass Distribution Table:\")\n    print(df)\n\n    # Display the table\n    fig, ax = plt.subplots(figsize=(12, 6))  # set size frame\n    ax.axis('tight')\n    ax.axis('off')\n    the_table = ax.table(cellText=df.values, colLabels=df.columns, loc='center', cellLoc='center')\n    plot_name = os.path.join(folder_name, 'class_distribution_table.png')\n    plt.savefig(f'{plot_name}', bbox_inches='tight', dpi=500, pad_inches=0.5)\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:18.039733Z","iopub.execute_input":"2024-06-11T13:57:18.040167Z","iopub.status.idle":"2024-06-11T13:57:18.066902Z","shell.execute_reply.started":"2024-06-11T13:57:18.040130Z","shell.execute_reply":"2024-06-11T13:57:18.065711Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"def load_checkpoint(model, optimizer, scheduler, checkpoint_path):\n    \"\"\"\n    Loads a checkpoint and resumes training from where it left off.\n\n    Parameters:\n    - model: The model to load the state dict into.\n    - optimizer: The optimizer to load the state dict into.\n    - scheduler: The learning rate scheduler to load the state dict into.\n    - checkpoint_path: Path to the checkpoint file.\n\n    Returns:\n    - start_epoch: The epoch to resume training from.\n    - best_loss: The best loss achieved before checkpointing.\n    \"\"\"\n    if not checkpoint_path or not os.path.exists(checkpoint_path):\n        raise FileNotFoundError(f\"Checkpoint file not found at '{checkpoint_path}'\")\n\n    checkpoint = th.load(checkpoint_path)\n    model.load_state_dict(checkpoint['model_state_dict'])\n\n    optimizer_state_dict = checkpoint['optimizer_state_dict']\n    # Ensure 'step' key exists in the optimizer state\n    for state in optimizer_state_dict['state'].values():\n        if 'step' not in state:\n            state['step'] = 0  # Initialize 'step' if missing\n\n    optimizer.load_state_dict(optimizer_state_dict)\n    \n    if scheduler is not None and 'scheduler_state_dict' in checkpoint:\n        scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n    start_epoch = checkpoint['epoch']\n    best_loss = checkpoint.get('loss', float('inf'))\n\n    return start_epoch, best_loss, checkpoint\n\ndef train_one_epoch(model, train_loader, loss_fn, optimizer, device, combo=False):\n    model.train()\n    loss_train, acc_train = [], []\n    \n    for batch in train_loader:\n        if combo:\n            x1, x2, y = batch\n            x1 = x1.to(device)\n            x2 = x2.to(device)\n            inputs = (x1, x2)\n        else:\n            x, y = batch\n            x = x.to(device)\n            inputs = (x,)\n        y = y.to(device).long()\n        optimizer.zero_grad()\n        \n        # Forward pass\n        out = model(*inputs)\n        l = loss_fn(out, y)\n        \n        acc, loss = (out.argmax(1) == y).cpu().numpy().sum() / out.shape[0], l.cpu().data.numpy()\n        loss_train.append(loss)\n        acc_train.append(acc)\n        l.backward()\n        optimizer.step()\n\n    acc_train = np.asarray(acc_train).mean()\n    loss_train = np.asarray(loss_train).mean()\n    \n    return loss_train, acc_train\n\ndef validate_one_epoch(model, val_loader, loss_fn, device, combo=False):\n    model.eval()\n    loss_val, acc_val_list = [], []\n    y_true, y_pred = [], []\n\n    for batch in val_loader:\n        if combo:\n            x1, x2, y = batch\n            x1 = x1.to(device)\n            x2 = x2.to(device)\n            inputs = (x1, x2)\n        else:\n            x, y = batch\n            x = x.to(device)\n            inputs = (x,)\n        y = y.to(device).long()\n        \n        with th.no_grad():\n            # Forward pass\n            out = model(*inputs)\n            l = loss_fn(out, y)\n        \n        loss_val.append(l.cpu().data.numpy())\n        predicted_labels = out.argmax(1)\n        y_true.extend(list(y.cpu().numpy()))\n        y_pred.extend(list(predicted_labels.cpu().numpy()))\n        acc = (predicted_labels == y).cpu().numpy().sum() / out.shape[0]\n        acc_val_list.append(acc)\n    \n    acc_val = np.asarray(acc_val_list).mean()\n    loss_val = np.asarray(loss_val).mean()\n    f1_test = f1_score(y_true, y_pred, average='macro')\n    \n    return loss_val, acc_val, f1_test, y_true, y_pred\n\ndef train_model(model, train_loader, val_loader, loss_fn, optimizer, scheduler, epochs, folder_name, checkpoint_path=None, combo=False):\n    t1, t2, t3, t4, t5 = [], [], [], [], []\n    device = th.device(\"cuda\" if th.cuda.is_available() else \"cpu\")\n\n    min_val_loss = float('inf')\n    best_epoch = 0\n    start_epoch = 0\n\n    # Load checkpoint if exists\n    if checkpoint_path and os.path.exists(checkpoint_path):\n        start_epoch, min_val_loss, checkpoint = load_checkpoint(model, optimizer, scheduler, checkpoint_path)\n        t1 = checkpoint['train_loss_history']\n        t2 = checkpoint['train_accuracy_history']\n        t3 = checkpoint['val_loss_history']\n        t4 = checkpoint['val_accuracy_history']\n        best_epoch = checkpoint['epoch']\n        print(f'Resuming training from epoch {start_epoch} with best loss {min_val_loss}')\n\n    for epoch in range(start_epoch, epochs):\n        start_time = time.time()  # Start time of the epoch\n\n        # Training phase\n        loss_train, acc_train = train_one_epoch(model, train_loader, loss_fn, optimizer, device, combo)\n        scheduler.step()\n\n        t1.append(loss_train)\n        t2.append(100 * acc_train)\n\n        # Validation phase\n        loss_val, acc_val, f1_test, y_true, y_pred = validate_one_epoch(model, val_loader, loss_fn, device, combo)\n\n        t3.append(loss_val)\n        t4.append(100 * acc_val)\n        t5.append(100 * f1_test)\n        \n        print('Epoch {}/{} - Train loss: {:.4f} - Val loss: {:.4f} - Train acc: {:.2f}% - Val acc: {:.2f}% - Test F1-score: {:.2f}'.format(\n            epoch + 1, epochs, loss_train, loss_val, 100 * acc_train, 100 * acc_val, 100 * f1_test))\n\n        elapsed_time = time.time() - start_time\n        print('Elapsed time: {:.2f} seconds'.format(elapsed_time))\n        \n        # Save the best model\n        if loss_val < min_val_loss:\n            min_val_loss = loss_val\n            best_epoch = epoch + 1\n\n            ckpt = {\n                'epoch': best_epoch,\n                'model_state_dict': model.state_dict(),\n                'optimizer_state_dict': optimizer.state_dict(),\n                'scheduler_state_dict': scheduler.state_dict() if scheduler is not None else None,\n                'train_loss_history': t1,\n                'train_accuracy_history': t2,\n                'val_loss_history': t3,\n                'val_accuracy_history': t4,\n                'y_true': y_true,\n                'y_pred': y_pred,\n                'loss': min_val_loss\n            }\n            \n            best_model_path = os.path.join(folder_name, 'best_model.pth')\n            th.save(ckpt, best_model_path)\n            print(f'Best model checkpoint saved at {best_model_path}')\n\n    # Save training results to a CSV file\n    results_df = pd.DataFrame({\n        'epoch': np.arange(1, epochs + 1),\n        'train_loss': t1,\n        'train_acc': t2,\n        'val_loss': t3,\n        'val_acc': t4,\n        'f1_score': t5\n    })\n    results_df.to_csv(os.path.join(folder_name, 'training_results.csv'), index=False)\n\n    return t1, t2, t3, t4, t5, best_epoch, best_model_path\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:18.068643Z","iopub.execute_input":"2024-06-11T13:57:18.069099Z","iopub.status.idle":"2024-06-11T13:57:18.097603Z","shell.execute_reply.started":"2024-06-11T13:57:18.069058Z","shell.execute_reply":"2024-06-11T13:57:18.096506Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"\ndef plot_training_results(t1, t2, t3, t4, t5, folder_name, figure_name, best_epoch):\n    print(f'Best epoch: {best_epoch}')\n    plt.figure(figsize=(12, 8))\n    plt.title(\"Training and Validation Loss and Accuracy\")\n\n    # Plot training and validation loss\n    p1, = plt.plot(t1, label='Train loss', color='blue')\n    p2, = plt.plot(t3, label='Validation loss', color='red')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.ylim(0, 0.5)\n\n    ax2 = plt.twinx()\n\n    # Plot training and validation accuracy\n    p3, = ax2.plot(t2, label='Train accuracy', color='orange')\n    p4, = ax2.plot(t4, label='Validation accuracy', color='green')\n    ax2.set_ylabel('Accuracy (%)')\n\n    # Plot test F1-score\n    p5, = ax2.plot(t5, label='F1-score-Validation', linestyle='dashed', color='purple')\n\n    # Combine legends\n    lines = [p1, p2, p3, p4, p5]\n    labels = [line.get_label() for line in lines]\n    plt.legend(lines, labels, loc='center left', bbox_to_anchor=(1.1, 0.5))\n\n    # Save the figure with the provided name\n    plot_name = os.path.join(folder_name, figure_name)\n    plt.savefig(f'{plot_name}.png', bbox_inches='tight', pad_inches=0.2, dpi=500)\n    print(f'Figure saved as {figure_name}.png')\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:18.098896Z","iopub.execute_input":"2024-06-11T13:57:18.099251Z","iopub.status.idle":"2024-06-11T13:57:18.115944Z","shell.execute_reply.started":"2024-06-11T13:57:18.099220Z","shell.execute_reply":"2024-06-11T13:57:18.114762Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"\ndef evaluate_model(best_model_path, data_loader, loss_fn, model_name, figure_name, folder_name, combo=False, temp=False, linear_classif=False, device=device):\n\n    # Load the best model\n    model = initialize_model(combo, linear_classif, temp, device)\n    ckpt = th.load(best_model_path)\n    model.load_state_dict(ckpt['model_state_dict'])\n    epoch = ckpt['epoch']\n    print(f'Model loaded from the best epoch {epoch}')\n    print('Model loaded')\n    \n    loss_val, acc_val = [], []\n    y_true, y_pred = [], []\n    device = th.device(\"cuda\" if th.cuda.is_available() else \"cpu\")\n\n    model.eval()\n    for batch in data_loader:\n        if combo:\n            x1, x2, y = batch\n            x1 = x1.to(device)\n            x2 = x2.to(device)\n            inputs = (x1, x2)\n        else:\n            x, y = batch\n            x = x.to(device)\n            inputs = (x,)\n        y = y.to(device).long()\n        \n        with th.no_grad():\n            # Forward pass\n            out = model(*inputs)\n            l = loss_fn(out, y)\n        \n        predicted_labels = out.argmax(1)\n        y_true.extend(list(y.cpu().numpy()))\n        y_pred.extend(list(predicted_labels.cpu().numpy()))\n        acc = (predicted_labels == y).cpu().numpy().sum() / out.shape[0]\n        loss_val.append(l.cpu().data.numpy())\n        acc_val.append(acc)\n\n    acc_val = np.asarray(acc_val).mean()\n    loss_val = np.asarray(loss_val).mean()\n\n    print('Validation loss: {:.4f}'.format(loss_val))\n    print('Validation accuracy: {:.2f}%'.format(100 * acc_val))\n\n    # Save the model\n    model_filename = os.path.join(folder_name, f'{model_name}.ckpt')\n    th.save(model.state_dict(), model_filename)\n    print(f'Model saved as {model_name}.ckpt')\n\n    # Print and save classification report\n    cf_report = classification_report(y_true, y_pred, digits=2, target_names=data_loader.dataset.class_names)\n    print(cf_report)\n    cf_report_filename = os.path.join(folder_name, f'{model_name}_classification_report.txt')\n    with open(cf_report_filename, 'w') as f:\n        f.write(cf_report)\n    print(f'Classification report saved as {cf_report_filename}')\n\n    # Compute and plot confusion matrix\n    cmatrix = confusion_matrix(y_true, y_pred)\n    Ncmatrix = cmatrix.astype('float') / cmatrix.sum(axis=1)[:, np.newaxis]\n\n    group_counts = ['{0:0.0f}'.format(value) for value in cmatrix.flatten()]\n    group_percentages = ['{0:.2%}'.format(value) for value in Ncmatrix.flatten()]\n    labels = [f'{v1}\\n{v2}' for v1, v2 in zip(group_counts, group_percentages)]\n    labels = np.asarray(labels).reshape(len(data_loader.dataset.class_names), len(data_loader.dataset.class_names))\n\n    # Plot and save the confusion matrix figure\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(Ncmatrix, annot=labels, fmt='', cmap='Reds', xticklabels=data_loader.dataset.class_names, yticklabels=data_loader.dataset.class_names)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\n Acc={:.2f}%'.format(100 * acc_val))\n    \n    plot_name = os.path.join(folder_name, f'{figure_name}.png')\n    plt.savefig(plot_name, bbox_inches='tight', pad_inches=0.2, dpi=500)\n    plt.show()\n    print(f'Figure saved as {figure_name}.png')\n\n    return 100 * acc_val\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:18.117657Z","iopub.execute_input":"2024-06-11T13:57:18.118550Z","iopub.status.idle":"2024-06-11T13:57:18.138304Z","shell.execute_reply.started":"2024-06-11T13:57:18.118503Z","shell.execute_reply":"2024-06-11T13:57:18.137161Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# tsn-e plot\n\ndef gen_features(net, dataloader, combo=False, linear_classif = True):\n    net.eval()\n    targets_list = []\n    outputs_list = []\n\n    with th.no_grad():\n        for idx, batch in enumerate(dataloader):\n            if combo:\n                x1, x2, targets = batch\n                x1 = x1.to(device)\n                x2 = x2.to(device)\n                inputs = (x1, x2)\n            else:\n                x, targets = batch\n                x = x.to(device)\n                inputs = (x,)\n            targets = targets.to(device)\n            targets_np = targets.cpu().numpy()\n            \n            if linear_classif:\n                outputs = net.forward(*inputs)\n                outputs_np = outputs.data.cpu().numpy()\n            else:\n                if combo:\n                    outputs = net.forward(*inputs)\n                else:\n                    outputs = net.partial_forward(*inputs)\n                outputs_np = outputs.data.cpu().numpy()\n            \n            targets_list.append(targets_np[:, np.newaxis])\n            outputs_list.append(outputs_np)\n\n            if ((idx + 1) % 10 == 0) or (idx + 1 == len(dataloader)):\n                print(idx + 1, '/', len(dataloader))\n\n    targets = np.concatenate(targets_list, axis=0)\n    outputs = np.concatenate(outputs_list, axis=0).astype(np.float64)\n\n    return targets, outputs\n\ndef tsne_plot(fig_name, targets, outputs):\n    print('generating t-SNE plot...')\n    # tsne_output = bh_sne(outputs)\n    tsne = TSNE(random_state=42, perplexity=50)\n    tsne_output = tsne.fit_transform(outputs)\n\n    df = pd.DataFrame(tsne_output, columns=['x', 'y'])\n    df['targets'] = targets\n\n    plt.rcParams['figure.figsize'] = 10, 10\n    sns.scatterplot(\n        x='x', y='y',\n        hue='targets',\n        palette=sns.color_palette(\"Paired\", 11),\n        data=df,\n        marker='o',\n        legend=\"full\",\n        alpha=0.5\n    )\n\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel('')\n    plt.ylabel('')\n    plt.legend(loc='best')\n    plt.title('t-SNE plot of the embeddings: After training')\n\n\n    plot_name = os.path.join(folder_name, f'{fig_name}.png')\n    plt.savefig(plot_name, bbox_inches='tight', pad_inches=0.2, dpi=500)\n    plt.show()\n    print(f'Figure saved as {fig_name}.png')\n    print('done!')","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:18.139668Z","iopub.execute_input":"2024-06-11T13:57:18.140046Z","iopub.status.idle":"2024-06-11T13:57:18.156835Z","shell.execute_reply.started":"2024-06-11T13:57:18.140007Z","shell.execute_reply":"2024-06-11T13:57:18.155492Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"# Start","metadata":{}},{"cell_type":"code","source":"%matplotlib inline\n# Initialize dataset\nif combine:\n    dataset1 = TS_COV(root_dir = root_dir, np_file = npz_file, estimator = 'scm', combo=combo, temp=temp)\n    dataset2 = TS_COV(root_dir = root_dir, np_file = npz_file1, estimator = 'scm', combo=combo, temp=temp)\n    dataset3 = TS_COV(root_dir = root_dir, np_file = npz_file2, estimator = 'scm', combo=combo, temp=temp)\n    dataset4 = TS_COV(root_dir = root_dir, np_file = npz_file3, estimator = 'scm', combo=combo, temp=temp)\nelse:\n    dataset = TS_COV(root_dir=root_dir, np_file=npz_file, estimator= 'scm', combo=combo, temp=temp)\n\n# Split data into train, validation, and test sets\nif combine:\n    train_loader, test_loader, all_labels = create_dataloaders(test_index, dataset1, dataset2, dataset3, dataset4, batch_size=batch_size)\n    # Calculate class weights\n    concatenated_labels = np.concatenate(all_labels)\n    weights = calculate_class_weights(concatenated_labels)   \n    weights = weights.to(device)\n    print(weights)\n    # Plot class distribution\n    val_loader = None\n    plot_class_distribution(train_loader, val_loader, test_loader, n_classes=n_classes, combo=combo, folder_name=folder_name)\nelse:\n    if val is not None:\n        train_indices, test_indices = train_test_split(list(range(len(dataset))),\n                                                        test_size=test_size, stratify=dataset.y, random_state=random_seed)\n        test_indices, val_indices = train_test_split(test_indices,\n                                                    test_size=val_size, stratify=dataset.y[test_indices], random_state=random_seed)\n    else:\n        train_indices, test_indices = train_test_split(list(range(len(dataset))),\n                                                    test_size=test_size, stratify=dataset.y, random_state=random_seed)\n        val_indices = None\n\n    # Calculate class weights\n    weights = calculate_class_weights(dataset.y)\n    weights = weights.to(device)\n\n    # Create data loaders\n    if val:\n        train_loader, val_loader, test_loader = create_data_loaders(dataset, train_indices, val_indices, test_indices, batch_size, val=val)\n    else:\n        train_loader, test_loader = create_data_loaders(dataset, train_indices, val_indices, test_indices, batch_size, val=val)\n        val_loader = None\n\n    # Plot class distribution\n    plot_class_distribution(train_loader, val_loader, test_loader, n_classes=n_classes, combo=combo, folder_name=folder_name)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:57:18.158189Z","iopub.execute_input":"2024-06-11T13:57:18.158516Z","iopub.status.idle":"2024-06-11T13:59:00.562521Z","shell.execute_reply.started":"2024-06-11T13:57:18.158479Z","shell.execute_reply":"2024-06-11T13:59:00.561318Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"tensor([0.9363, 0.8506, 0.9763, 0.7476, 0.9948, 0.7906, 0.7038],\n       dtype=torch.float64)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"\nClass Distribution Table:\n               Class     Train  Validation     Test\n0             barley   30927.0         0.0  13046.0\n1              wheat   72562.0         0.0  30368.0\n2           rapeseed   11496.0         0.0   5593.0\n3               corn  122575.0         0.0  43990.0\n4           orchards    2517.0         0.0    944.0\n5  permanent meadows  101696.0         0.0  32650.0\n6  temporary meadows  143821.0         0.0  52011.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# access one matri\nif combo:\n    for x1,x2, y in train_loader:\n        print(x1)\n        print(x2.shape)\n        print(y.shape)\n        break\nelse:\n    for x, y in train_loader:\n        print(x.shape)\n        print(y.shape)\n        break\n    ","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:59:00.563829Z","iopub.execute_input":"2024-06-11T13:59:00.564175Z","iopub.status.idle":"2024-06-11T13:59:00.635227Z","shell.execute_reply.started":"2024-06-11T13:59:00.564148Z","shell.execute_reply":"2024-06-11T13:59:00.633876Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"tensor([[[[0.0896, 0.1268, 0.1640,  ..., 0.1690, 0.0290, 0.1456],\n          [0.1268, 0.1812, 0.2356,  ..., 0.2459, 0.0418, 0.2116],\n          [0.1640, 0.2356, 0.3072,  ..., 0.3229, 0.0547, 0.2776],\n          ...,\n          [0.1690, 0.2459, 0.3229,  ..., 0.3487, 0.0586, 0.2989],\n          [0.0290, 0.0418, 0.0547,  ..., 0.0586, 0.0103, 0.0504],\n          [0.1456, 0.2116, 0.2776,  ..., 0.2989, 0.0504, 0.2564]]],\n\n\n        [[[0.3998, 0.4247, 0.3183,  ..., 0.3054, 0.1181, 0.2173],\n          [0.4247, 0.4542, 0.3396,  ..., 0.3229, 0.1253, 0.2286],\n          [0.3183, 0.3396, 0.2560,  ..., 0.2437, 0.0962, 0.1725],\n          ...,\n          [0.3054, 0.3229, 0.2437,  ..., 0.2355, 0.0915, 0.1677],\n          [0.1181, 0.1253, 0.0962,  ..., 0.0915, 0.0377, 0.0649],\n          [0.2173, 0.2286, 0.1725,  ..., 0.1677, 0.0649, 0.1202]]],\n\n\n        [[[0.2752, 0.3819, 0.3765,  ..., 0.1754, 0.2129, 0.1577],\n          [0.3819, 0.5326, 0.5255,  ..., 0.2428, 0.2934, 0.2173],\n          [0.3765, 0.5255, 0.5187,  ..., 0.2392, 0.2888, 0.2138],\n          ...,\n          [0.1754, 0.2428, 0.2392,  ..., 0.1142, 0.1365, 0.1021],\n          [0.2129, 0.2934, 0.2888,  ..., 0.1365, 0.1672, 0.1241],\n          [0.1577, 0.2173, 0.2138,  ..., 0.1021, 0.1241, 0.0928]]],\n\n\n        ...,\n\n\n        [[[0.0338, 0.1046, 0.1320,  ..., 0.1168, 0.0240, 0.1020],\n          [0.1046, 0.3353, 0.4293,  ..., 0.3793, 0.0760, 0.3329],\n          [0.1320, 0.4293, 0.5558,  ..., 0.4882, 0.0972, 0.4309],\n          ...,\n          [0.1168, 0.3793, 0.4882,  ..., 0.4319, 0.0857, 0.3797],\n          [0.0240, 0.0760, 0.0972,  ..., 0.0857, 0.0175, 0.0753],\n          [0.1020, 0.3329, 0.4309,  ..., 0.3797, 0.0753, 0.3352]]],\n\n\n        [[[0.0365, 0.1154, 0.1194,  ..., 0.1171, 0.0241, 0.1161],\n          [0.1154, 0.3861, 0.4141,  ..., 0.3979, 0.0808, 0.4041],\n          [0.1194, 0.4141, 0.4599,  ..., 0.4317, 0.0876, 0.4470],\n          ...,\n          [0.1171, 0.3979, 0.4317,  ..., 0.4122, 0.0836, 0.4213],\n          [0.0241, 0.0808, 0.0876,  ..., 0.0836, 0.0173, 0.0853],\n          [0.1161, 0.4041, 0.4470,  ..., 0.4213, 0.0853, 0.4362]]],\n\n\n        [[[0.4684, 0.6552, 0.6978,  ..., 0.2724, 0.2567, 0.2626],\n          [0.6552, 0.9195, 0.9800,  ..., 0.3820, 0.3601, 0.3664],\n          [0.6978, 0.9800, 1.0449,  ..., 0.4074, 0.3840, 0.3900],\n          ...,\n          [0.2724, 0.3820, 0.4074,  ..., 0.1598, 0.1507, 0.1527],\n          [0.2567, 0.3601, 0.3840,  ..., 0.1507, 0.1444, 0.1467],\n          [0.2626, 0.3664, 0.3900,  ..., 0.1527, 0.1467, 0.1512]]]],\n       dtype=torch.float64)\ntorch.Size([64, 1, 10, 10])\ntorch.Size([64])\n","output_type":"stream"}]},{"cell_type":"code","source":"# initialize the model\nmodel = initialize_model(combo, linear_classif, temp, device)\n# model.load_state_dict(th.load('model_temp_linear_mm_209.ckpt'))\nmodel.eval()","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:59:00.639040Z","iopub.execute_input":"2024-06-11T13:59:00.639409Z","iopub.status.idle":"2024-06-11T13:59:00.791489Z","shell.execute_reply.started":"2024-06-11T13:59:00.639378Z","shell.execute_reply":"2024-06-11T13:59:00.790036Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Combo model with Buseman classifier\nTrainable total parameters: 85572\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/geoopt/manifolds/symmetric_positive_definite.py:52: UserWarning: SPDMetric.LEM is not fully implemented and results may be not as you expect\n  warnings.warn(\n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"LogEucRResNet_Combo(\n  (model_temp): LogEucRResNet(\n    (manifold_Stiefel): Stiefel(canonical) manifold\n    (manifold_SPD): SymmetricPositiveDefinite(default_metric=SPDMetric.LEM) manifold\n    (classiflayer): BusemanSimilarityClassifier(\n      (manifold): Stiefel(canonical) manifold\n      (linear): Linear(in_features=8, out_features=7, bias=True)\n    )\n    (fc_layer): Linear(in_features=3249, out_features=7, bias=True)\n    (softmax): Softmax(dim=-1)\n    (spectrum_map): Sequential(\n      (0): Conv1d(1, 10, kernel_size=(5,), stride=(1,), padding=same)\n      (1): LeakyReLU(negative_slope=0.01)\n      (2): BatchNorm1d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (3): Conv1d(10, 5, kernel_size=(3,), stride=(1,), padding=same)\n      (4): LeakyReLU(negative_slope=0.01)\n      (5): BatchNorm1d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (6): Conv1d(5, 1, kernel_size=(3,), stride=(1,), padding=same)\n    )\n  )\n  (model_spectral): LogEucRResNet(\n    (manifold_Stiefel): Stiefel(canonical) manifold\n    (manifold_SPD): SymmetricPositiveDefinite(default_metric=SPDMetric.LEM) manifold\n    (classiflayer): BusemanSimilarityClassifier(\n      (manifold): Stiefel(canonical) manifold\n      (linear): Linear(in_features=8, out_features=7, bias=True)\n    )\n    (fc_layer): Linear(in_features=64, out_features=7, bias=True)\n    (softmax): Softmax(dim=-1)\n    (spectrum_map): Sequential(\n      (0): Conv1d(1, 10, kernel_size=(5,), stride=(1,), padding=same)\n      (1): LeakyReLU(negative_slope=0.01)\n      (2): BatchNorm1d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (3): Conv1d(10, 5, kernel_size=(3,), stride=(1,), padding=same)\n      (4): LeakyReLU(negative_slope=0.01)\n      (5): BatchNorm1d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (6): Conv1d(5, 1, kernel_size=(3,), stride=(1,), padding=same)\n    )\n  )\n  (classiflayer_temp): BusemanSimilarityClassifier(\n    (manifold): Stiefel(canonical) manifold\n    (linear): Linear(in_features=8, out_features=7, bias=True)\n  )\n  (classiflayer_spec): BusemanSimilarityClassifier(\n    (manifold): Stiefel(canonical) manifold\n    (linear): Linear(in_features=8, out_features=7, bias=True)\n  )\n  (fc_layer): Linear(in_features=14, out_features=7, bias=True)\n  (softmax): Softmax(dim=-1)\n)"},"metadata":{}}]},{"cell_type":"code","source":"#setup loss and optimizer\n\nif loss == \"focal\":\n    loss_fn = FocalLoss(gamma=gamma_loss,weights=weights)\nelse:\n    loss_fn = nn.CrossEntropyLoss(weights=weights)\n#opti = MixOptimizer(model.parameters(),lr=lr)\nopti = geoopt.optim.RiemannianAdam(model.parameters(), lr=lr)\nif step_lr:\n    scheduler = lr_scheduler.StepLR(opti, step_size, gamma_value)\nelse:\n    scheduler = lr_scheduler.ExponentialLR(opti, gamma=gamma_value)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:59:00.792837Z","iopub.execute_input":"2024-06-11T13:59:00.793185Z","iopub.status.idle":"2024-06-11T13:59:02.701404Z","shell.execute_reply.started":"2024-06-11T13:59:00.793156Z","shell.execute_reply":"2024-06-11T13:59:02.700146Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"%matplotlib inline\n\nif val:\n    t1, t2, t3, t4, t5, best_epoch, best_model_path = train_model(model, train_loader, val_loader, loss_fn, opti, scheduler, epochs, folder_name, checkpoint_path, combo=combo)\nelse:\n    t1, t2, t3, t4, t5, best_epoch, best_model_path = train_model(model, train_loader, test_loader, loss_fn, opti, scheduler, epochs, folder_name, checkpoint_path, combo=combo)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T13:59:02.702753Z","iopub.execute_input":"2024-06-11T13:59:02.703287Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Resuming training from epoch 62 with best loss 0.09828653954608287\nEpoch 63/200 - Train loss: 0.1007 - Val loss: 0.0987 - Train acc: 81.92% - Val acc: 83.14% - Test F1-score: 78.46\nElapsed time: 627.33 seconds\nEpoch 64/200 - Train loss: 0.1006 - Val loss: 0.0983 - Train acc: 81.92% - Val acc: 83.27% - Test F1-score: 78.01\nElapsed time: 630.58 seconds\nEpoch 65/200 - Train loss: 0.1005 - Val loss: 0.0987 - Train acc: 81.93% - Val acc: 83.37% - Test F1-score: 77.71\nElapsed time: 628.86 seconds\nEpoch 66/200 - Train loss: 0.1005 - Val loss: 0.0982 - Train acc: 81.95% - Val acc: 83.40% - Test F1-score: 78.16\nElapsed time: 628.63 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 67/200 - Train loss: 0.1004 - Val loss: 0.0983 - Train acc: 81.95% - Val acc: 83.24% - Test F1-score: 78.42\nElapsed time: 635.53 seconds\nEpoch 68/200 - Train loss: 0.1003 - Val loss: 0.0981 - Train acc: 81.98% - Val acc: 83.27% - Test F1-score: 78.70\nElapsed time: 633.60 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 69/200 - Train loss: 0.1003 - Val loss: 0.0982 - Train acc: 81.94% - Val acc: 83.19% - Test F1-score: 78.17\nElapsed time: 631.09 seconds\nEpoch 70/200 - Train loss: 0.1002 - Val loss: 0.0982 - Train acc: 81.96% - Val acc: 83.26% - Test F1-score: 78.01\nElapsed time: 630.62 seconds\nEpoch 71/200 - Train loss: 0.1001 - Val loss: 0.0981 - Train acc: 81.98% - Val acc: 83.28% - Test F1-score: 77.96\nElapsed time: 628.47 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 72/200 - Train loss: 0.1001 - Val loss: 0.0980 - Train acc: 81.99% - Val acc: 83.23% - Test F1-score: 78.17\nElapsed time: 627.66 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 73/200 - Train loss: 0.1000 - Val loss: 0.0980 - Train acc: 81.94% - Val acc: 83.26% - Test F1-score: 78.09\nElapsed time: 627.18 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 74/200 - Train loss: 0.1000 - Val loss: 0.0979 - Train acc: 81.97% - Val acc: 83.26% - Test F1-score: 78.50\nElapsed time: 631.84 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 75/200 - Train loss: 0.0999 - Val loss: 0.0988 - Train acc: 81.98% - Val acc: 83.35% - Test F1-score: 78.18\nElapsed time: 645.16 seconds\nEpoch 76/200 - Train loss: 0.0999 - Val loss: 0.0979 - Train acc: 81.99% - Val acc: 83.40% - Test F1-score: 78.12\nElapsed time: 645.83 seconds\nEpoch 77/200 - Train loss: 0.0999 - Val loss: 0.0978 - Train acc: 81.99% - Val acc: 83.34% - Test F1-score: 78.18\nElapsed time: 655.12 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 78/200 - Train loss: 0.0998 - Val loss: 0.0979 - Train acc: 81.98% - Val acc: 83.36% - Test F1-score: 78.34\nElapsed time: 655.25 seconds\nEpoch 79/200 - Train loss: 0.0997 - Val loss: 0.0979 - Train acc: 81.99% - Val acc: 83.32% - Test F1-score: 78.59\nElapsed time: 654.71 seconds\nEpoch 80/200 - Train loss: 0.0997 - Val loss: 0.0979 - Train acc: 82.00% - Val acc: 83.31% - Test F1-score: 78.08\nElapsed time: 671.03 seconds\nEpoch 81/200 - Train loss: 0.0997 - Val loss: 0.0981 - Train acc: 81.98% - Val acc: 83.37% - Test F1-score: 78.08\nElapsed time: 653.37 seconds\nEpoch 82/200 - Train loss: 0.0997 - Val loss: 0.0980 - Train acc: 82.01% - Val acc: 83.22% - Test F1-score: 78.08\nElapsed time: 653.72 seconds\nEpoch 83/200 - Train loss: 0.0996 - Val loss: 0.0979 - Train acc: 82.00% - Val acc: 83.37% - Test F1-score: 78.10\nElapsed time: 652.23 seconds\nEpoch 84/200 - Train loss: 0.0995 - Val loss: 0.0977 - Train acc: 81.99% - Val acc: 83.28% - Test F1-score: 78.46\nElapsed time: 694.70 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 85/200 - Train loss: 0.0996 - Val loss: 0.0979 - Train acc: 82.02% - Val acc: 83.28% - Test F1-score: 78.49\nElapsed time: 652.57 seconds\nEpoch 86/200 - Train loss: 0.0995 - Val loss: 0.0978 - Train acc: 82.01% - Val acc: 83.25% - Test F1-score: 78.53\nElapsed time: 653.67 seconds\nEpoch 87/200 - Train loss: 0.0995 - Val loss: 0.0978 - Train acc: 82.04% - Val acc: 83.32% - Test F1-score: 78.53\nElapsed time: 682.97 seconds\nEpoch 88/200 - Train loss: 0.0995 - Val loss: 0.0978 - Train acc: 82.01% - Val acc: 83.29% - Test F1-score: 78.38\nElapsed time: 657.35 seconds\nEpoch 89/200 - Train loss: 0.0994 - Val loss: 0.0978 - Train acc: 82.03% - Val acc: 83.32% - Test F1-score: 78.37\nElapsed time: 651.70 seconds\nEpoch 90/200 - Train loss: 0.0994 - Val loss: 0.0978 - Train acc: 82.01% - Val acc: 83.30% - Test F1-score: 78.50\nElapsed time: 654.24 seconds\nEpoch 91/200 - Train loss: 0.0994 - Val loss: 0.0977 - Train acc: 82.02% - Val acc: 83.38% - Test F1-score: 78.28\nElapsed time: 696.99 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 92/200 - Train loss: 0.0993 - Val loss: 0.0976 - Train acc: 82.02% - Val acc: 83.36% - Test F1-score: 78.51\nElapsed time: 661.03 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 93/200 - Train loss: 0.0994 - Val loss: 0.0978 - Train acc: 82.01% - Val acc: 83.29% - Test F1-score: 78.59\nElapsed time: 655.18 seconds\nEpoch 94/200 - Train loss: 0.0994 - Val loss: 0.0976 - Train acc: 82.04% - Val acc: 83.30% - Test F1-score: 78.54\nElapsed time: 691.98 seconds\nEpoch 95/200 - Train loss: 0.0993 - Val loss: 0.0977 - Train acc: 82.02% - Val acc: 83.33% - Test F1-score: 78.37\nElapsed time: 669.86 seconds\nEpoch 96/200 - Train loss: 0.0993 - Val loss: 0.0977 - Train acc: 82.02% - Val acc: 83.31% - Test F1-score: 78.50\nElapsed time: 655.72 seconds\nEpoch 97/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.03% - Val acc: 83.31% - Test F1-score: 78.65\nElapsed time: 654.50 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 98/200 - Train loss: 0.0993 - Val loss: 0.0977 - Train acc: 82.02% - Val acc: 83.37% - Test F1-score: 78.38\nElapsed time: 667.11 seconds\nEpoch 99/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.02% - Val acc: 83.27% - Test F1-score: 78.31\nElapsed time: 655.69 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 100/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.01% - Val acc: 83.26% - Test F1-score: 78.53\nElapsed time: 657.82 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 101/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.04% - Val acc: 83.33% - Test F1-score: 78.61\nElapsed time: 693.84 seconds\nEpoch 102/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.03% - Val acc: 83.34% - Test F1-score: 78.65\nElapsed time: 670.33 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 103/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.04% - Val acc: 83.31% - Test F1-score: 78.45\nElapsed time: 664.07 seconds\nEpoch 104/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.02% - Val acc: 83.28% - Test F1-score: 78.58\nElapsed time: 691.29 seconds\nEpoch 105/200 - Train loss: 0.0992 - Val loss: 0.0976 - Train acc: 82.03% - Val acc: 83.32% - Test F1-score: 78.24\nElapsed time: 681.96 seconds\nEpoch 106/200 - Train loss: 0.0991 - Val loss: 0.0977 - Train acc: 82.03% - Val acc: 83.39% - Test F1-score: 78.51\nElapsed time: 658.55 seconds\nEpoch 107/200 - Train loss: 0.0991 - Val loss: 0.0976 - Train acc: 82.05% - Val acc: 83.37% - Test F1-score: 78.18\nElapsed time: 663.61 seconds\nEpoch 108/200 - Train loss: 0.0991 - Val loss: 0.0975 - Train acc: 82.04% - Val acc: 83.30% - Test F1-score: 78.54\nElapsed time: 672.36 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 109/200 - Train loss: 0.0991 - Val loss: 0.0975 - Train acc: 82.03% - Val acc: 83.36% - Test F1-score: 78.53\nElapsed time: 653.50 seconds\nBest model checkpoint saved at bzh_comb_combo/best_model.pth\nEpoch 110/200 - Train loss: 0.0991 - Val loss: 0.0976 - Train acc: 82.04% - Val acc: 83.27% - Test F1-score: 78.58\nElapsed time: 689.92 seconds\n","output_type":"stream"}]},{"cell_type":"code","source":"\nplot_training_results(t1, t2, t3, t4, t5,folder_name, plot_figure_name, best_epoch)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%matplotlib inline\nacc_val = evaluate_model(best_model_path, test_loader, loss_fn, model_name, figure_name, folder_name, combo=combo, temp=temp, linear_classif=linear_classif, device=device)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# path = r\"C:\\Users\\Khizer Zakir\\OneDrive - Université Bretagne Sud\\thesis\\Covariance_Thesis\\notebooks\\my_model\\mm_21\\model_combo_linear_mm_216.ckpt\"\n# # Load the best model\n# ckpt = th.load(path)\n# print(ckpt.keys())\n# bimap = ckpt['model_temp.bimap1']\n# array = bimap.squeeze().numpy()\n\n# # Plot the array\n# plt.figure(figsize=(6, 6))\n# plt.imshow(array, cmap='viridis')  # Use a suitable colormap\n# plt.colorbar()\n# plt.title('Tensor Visualization')\n# plt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %matplotlib inline\n\n# targets, outputs = gen_features(model,test_loader, combo =combo, linear_classif=linear_classif)\n# tsne_plot(tsne_fig_name,targets, outputs)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}